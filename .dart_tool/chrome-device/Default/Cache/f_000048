define(['dart_sdk', 'packages/rxdart/src/utils/forwarding_sink.dart', 'packages/rxdart/src/utils/notification.dart', 'packages/rxdart/src/streams/timer.dart', 'packages/rxdart/src/streams/never.dart', 'packages/rxdart/src/utils/error_and_stacktrace.dart', 'packages/rxdart/src/subjects/subject.dart', 'packages/rxdart/src/streams/replay_stream.dart', 'packages/rxdart/src/utils/value_wrapper.dart', 'packages/rxdart/src/streams/value_stream.dart', 'packages/rxdart/src/subjects/publish_subject.dart', 'packages/rxdart/src/streams/combine_latest.dart', 'packages/rxdart/src/streams/concat.dart', 'packages/rxdart/src/streams/concat_eager.dart', 'packages/rxdart/src/streams/defer.dart', 'packages/rxdart/src/streams/fork_join.dart', 'packages/rxdart/src/streams/from_callable.dart', 'packages/rxdart/src/streams/merge.dart', 'packages/rxdart/src/streams/race.dart', 'packages/rxdart/src/streams/range.dart', 'packages/rxdart/src/streams/repeat.dart', 'packages/rxdart/src/streams/retry.dart', 'packages/rxdart/src/streams/retry_when.dart', 'packages/rxdart/src/streams/sequence_equal.dart', 'packages/rxdart/src/streams/switch_latest.dart', 'packages/rxdart/src/streams/using.dart', 'packages/rxdart/src/streams/zip.dart'], (function load__packages__rxdart__src__transformers__with_latest_from_dart(dart_sdk, packages__rxdart__src__utils__forwarding_sink$46dart, packages__rxdart__src__utils__notification$46dart, packages__rxdart__src__streams__timer$46dart, packages__rxdart__src__streams__never$46dart, packages__rxdart__src__utils__error_and_stacktrace$46dart, packages__rxdart__src__subjects__subject$46dart, packages__rxdart__src__streams__replay_stream$46dart, packages__rxdart__src__utils__value_wrapper$46dart, packages__rxdart__src__streams__value_stream$46dart, packages__rxdart__src__subjects__publish_subject$46dart, packages__rxdart__src__streams__combine_latest$46dart, packages__rxdart__src__streams__concat$46dart, packages__rxdart__src__streams__concat_eager$46dart, packages__rxdart__src__streams__defer$46dart, packages__rxdart__src__streams__fork_join$46dart, packages__rxdart__src__streams__from_callable$46dart, packages__rxdart__src__streams__merge$46dart, packages__rxdart__src__streams__race$46dart, packages__rxdart__src__streams__range$46dart, packages__rxdart__src__streams__repeat$46dart, packages__rxdart__src__streams__retry$46dart, packages__rxdart__src__streams__retry_when$46dart, packages__rxdart__src__streams__sequence_equal$46dart, packages__rxdart__src__streams__switch_latest$46dart, packages__rxdart__src__streams__using$46dart, packages__rxdart__src__streams__zip$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const forwarding_sink = packages__rxdart__src__utils__forwarding_sink$46dart.src__utils__forwarding_sink;
  const notification = packages__rxdart__src__utils__notification$46dart.src__utils__notification;
  const timer = packages__rxdart__src__streams__timer$46dart.src__streams__timer;
  const never = packages__rxdart__src__streams__never$46dart.src__streams__never;
  const error_and_stacktrace = packages__rxdart__src__utils__error_and_stacktrace$46dart.src__utils__error_and_stacktrace;
  const subject = packages__rxdart__src__subjects__subject$46dart.src__subjects__subject;
  const replay_stream = packages__rxdart__src__streams__replay_stream$46dart.src__streams__replay_stream;
  const value_wrapper = packages__rxdart__src__utils__value_wrapper$46dart.src__utils__value_wrapper;
  const value_stream = packages__rxdart__src__streams__value_stream$46dart.src__streams__value_stream;
  const publish_subject = packages__rxdart__src__subjects__publish_subject$46dart.src__subjects__publish_subject;
  const combine_latest = packages__rxdart__src__streams__combine_latest$46dart.src__streams__combine_latest;
  const concat = packages__rxdart__src__streams__concat$46dart.src__streams__concat;
  const concat_eager = packages__rxdart__src__streams__concat_eager$46dart.src__streams__concat_eager;
  const defer = packages__rxdart__src__streams__defer$46dart.src__streams__defer;
  const fork_join = packages__rxdart__src__streams__fork_join$46dart.src__streams__fork_join;
  const from_callable = packages__rxdart__src__streams__from_callable$46dart.src__streams__from_callable;
  const merge = packages__rxdart__src__streams__merge$46dart.src__streams__merge;
  const race = packages__rxdart__src__streams__race$46dart.src__streams__race;
  const range = packages__rxdart__src__streams__range$46dart.src__streams__range;
  const repeat = packages__rxdart__src__streams__repeat$46dart.src__streams__repeat;
  const retry = packages__rxdart__src__streams__retry$46dart.src__streams__retry;
  const retry_when = packages__rxdart__src__streams__retry_when$46dart.src__streams__retry_when;
  const sequence_equal = packages__rxdart__src__streams__sequence_equal$46dart.src__streams__sequence_equal;
  const switch_latest = packages__rxdart__src__streams__switch_latest$46dart.src__streams__switch_latest;
  const using = packages__rxdart__src__streams__using$46dart.src__streams__using;
  const zip = packages__rxdart__src__streams__zip$46dart.src__streams__zip;
  var with_latest_from = Object.create(dart.library);
  var time_interval = Object.create(dart.library);
  var take_until = Object.create(dart.library);
  var take_last = Object.create(dart.library);
  var switch_map = Object.create(dart.library);
  var switch_if_empty = Object.create(dart.library);
  var start_with_many = Object.create(dart.library);
  var skip_until = Object.create(dart.library);
  var on_error_resume = Object.create(dart.library);
  var flat_map = Object.create(dart.library);
  var exhaust_map = Object.create(dart.library);
  var $do = Object.create(dart.library);
  var window$ = Object.create(dart.library);
  var throttle = Object.create(dart.library);
  var sample = Object.create(dart.library);
  var pairwise = Object.create(dart.library);
  var debounce = Object.create(dart.library);
  var backpressure = Object.create(dart.library);
  var buffer = Object.create(dart.library);
  var transformers = Object.create(dart.library);
  var replay_subject = Object.create(dart.library);
  var start_with_error = Object.create(dart.library);
  var forwarding_stream = Object.create(dart.library);
  var start_with = Object.create(dart.library);
  var behavior_subject = Object.create(dart.library);
  var subjects = Object.create(dart.library);
  var connectable_stream = Object.create(dart.library);
  var streams = Object.create(dart.library);
  var rx = Object.create(dart.library);
  var rxdart = Object.create(dart.library);
  var $length = dartx.length;
  var $every = dartx.every;
  var $forEach = dartx.forEach;
  var $isNotEmpty = dartx.isNotEmpty;
  var $map = dartx.map;
  var $_set = dartx._set;
  var $toList = dartx.toList;
  var $addAll = dartx.addAll;
  var $_get = dartx._get;
  var $hashCode = dartx.hashCode;
  var $remove = dartx.remove;
  var $add = dartx.add;
  var $isEmpty = dartx.isEmpty;
  var $last = dartx.last;
  var $reversed = dartx.reversed;
  var $fold = dartx.fold;
  var $where = dartx.where;
  dart._checkModuleNullSafetyMode(true);
  var T$ = {
    ListOfbool: () => (T$.ListOfbool = dart.constFn(core.List$(core.bool)))(),
    boolTobool: () => (T$.boolTobool = dart.constFn(dart.fnType(core.bool, [core.bool])))(),
    JSArrayOfFuture: () => (T$.JSArrayOfFuture = dart.constFn(_interceptors.JSArray$(async.Future)))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    JSArrayOfStream: () => (T$.JSArrayOfStream = dart.constFn(_interceptors.JSArray$(async.Stream)))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    intTovoid: () => (T$.intTovoid = dart.constFn(dart.fnType(dart.void, [core.int])))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    VoidToFutureOrOfvoid: () => (T$.VoidToFutureOrOfvoid = dart.constFn(dart.fnType(dart.void, [])))(),
    StackTraceN: () => (T$.StackTraceN = dart.constFn(dart.nullable(core.StackTrace)))(),
    ObjectAndStackTraceNTovoid: () => (T$.ObjectAndStackTraceNTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, T$.StackTraceN()])))(),
    StreamOfvoid: () => (T$.StreamOfvoid = dart.constFn(async.Stream$(dart.void)))(),
    TimerStreamOfbool: () => (T$.TimerStreamOfbool = dart.constFn(timer.TimerStream$(core.bool)))(),
    NeverStreamOfvoid: () => (T$.NeverStreamOfvoid = dart.constFn(never.NeverStream$(dart.void)))(),
    TimerStreamOfvoid: () => (T$.TimerStreamOfvoid = dart.constFn(timer.TimerStream$(dart.void)))(),
    dynamicTovoid: () => (T$.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),
    FnTovoid: () => (T$.FnTovoid = dart.constFn(dart.fnType(dart.void, [T$.VoidTovoid()])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    FutureOfList: () => (T$.FutureOfList = dart.constFn(async.Future$(core.List)))(),
    VoidToFutureOfList: () => (T$.VoidToFutureOfList = dart.constFn(dart.fnType(T$.FutureOfList(), [])))(),
    VoidToFutureOfvoid: () => (T$.VoidToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [])))(),
    voidToFuture: () => (T$.voidToFuture = dart.constFn(dart.fnType(async.Future, [dart.void])))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: backpressure.WindowStrategy.prototype,
        [_name$]: "WindowStrategy.everyEvent",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: backpressure.WindowStrategy.prototype,
        [_name$]: "WindowStrategy.eventAfterLastWindow",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: backpressure.WindowStrategy.prototype,
        [_name$]: "WindowStrategy.firstEventOnly",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: backpressure.WindowStrategy.prototype,
        [_name$]: "WindowStrategy.onHandler",
        index: 3
      });
    },
    get C4() {
      return C[4] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3], backpressure.WindowStrategy);
    }
  }, false);
  var C = Array(5).fill(void 0);
  var I = [
    "package:rxdart/src/transformers/with_latest_from.dart",
    "package:rxdart/src/transformers/time_interval.dart",
    "package:rxdart/src/transformers/take_until.dart",
    "package:rxdart/src/transformers/take_last.dart",
    "package:rxdart/src/transformers/switch_map.dart",
    "package:rxdart/src/transformers/switch_if_empty.dart",
    "package:rxdart/src/transformers/start_with_many.dart",
    "package:rxdart/src/transformers/skip_until.dart",
    "package:rxdart/src/transformers/on_error_resume.dart",
    "package:rxdart/src/transformers/flat_map.dart",
    "package:rxdart/src/transformers/exhaust_map.dart",
    "package:rxdart/src/transformers/do.dart",
    "package:rxdart/src/transformers/backpressure/backpressure.dart",
    "package:rxdart/src/transformers/backpressure/window.dart",
    "package:rxdart/src/transformers/backpressure/throttle.dart",
    "package:rxdart/src/transformers/backpressure/sample.dart",
    "package:rxdart/src/transformers/backpressure/pairwise.dart",
    "package:rxdart/src/transformers/backpressure/debounce.dart",
    "package:rxdart/src/transformers/backpressure/buffer.dart",
    "package:rxdart/src/subjects/replay_subject.dart",
    "package:rxdart/src/transformers/start_with_error.dart",
    "package:rxdart/src/transformers/start_with.dart",
    "package:rxdart/src/subjects/behavior_subject.dart",
    "package:rxdart/src/streams/connectable_stream.dart",
    "package:rxdart/src/rx.dart"
  ];
  var _subscriptions = dart.privateName(with_latest_from, "_subscriptions");
  var _latestFromStreams$ = dart.privateName(with_latest_from, "_latestFromStreams");
  var _combiner$ = dart.privateName(with_latest_from, "_combiner");
  var _hasValues = dart.privateName(with_latest_from, "_hasValues");
  var _latestValues = dart.privateName(with_latest_from, "_latestValues");
  const _is__WithLatestFromStreamSink_default = Symbol('_is__WithLatestFromStreamSink_default');
  with_latest_from._WithLatestFromStreamSink$ = dart.generic((S, T, R) => {
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    var ListOfTN = () => (ListOfTN = dart.constFn(core.List$(TN())))();
    var ListOfT = () => (ListOfT = dart.constFn(core.List$(T)))();
    var StreamSubscriptionOfT = () => (StreamSubscriptionOfT = dart.constFn(async.StreamSubscription$(T)))();
    var StreamSubscriptionOfTTovoid = () => (StreamSubscriptionOfTTovoid = dart.constFn(dart.fnType(dart.void, [StreamSubscriptionOfT()])))();
    var StreamSubscriptionOfTToFutureOfvoid = () => (StreamSubscriptionOfTToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [StreamSubscriptionOfT()])))();
    var TTovoid = () => (TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
    var StreamOfTToStreamSubscriptionOfT = () => (StreamOfTToStreamSubscriptionOfT = dart.constFn(dart.fnType(StreamSubscriptionOfT(), [StreamOfT()])))();
    var EventSinkOfR = () => (EventSinkOfR = dart.constFn(async.EventSink$(R)))();
    class _WithLatestFromStreamSink extends core.Object {
      add(sink, data) {
        let t1, t0;
        EventSinkOfR().as(sink);
        S.as(data);
        if (this[_hasValues][$every](dart.fn(value => value, T$.boolTobool()))) {
          sink.add((t0 = data, t1 = ListOfT().unmodifiable(this[_latestValues]), this[_combiner$](t0, t1)));
        }
      }
      addError(sink, e, st = null) {
        EventSinkOfR().as(sink);
        return sink.addError(e, st);
      }
      close(sink) {
        let t0;
        EventSinkOfR().as(sink);
        t0 = this[_subscriptions];
        t0 == null ? null : t0[$forEach](dart.fn(it => it.cancel(), StreamSubscriptionOfTTovoid()));
        this[_subscriptions] = null;
        sink.close();
      }
      onCancel(sink) {
        EventSinkOfR().as(sink);
        let futures = T$.JSArrayOfFuture().of([]);
        if (this[_subscriptions] != null && dart.nullCheck(this[_subscriptions])[$isNotEmpty]) {
          futures = dart.nullCheck(this[_subscriptions])[$map](async.Future, dart.fn(it => it.cancel(), StreamSubscriptionOfTToFutureOfvoid()));
        }
        return futures[$isNotEmpty] ? async.Future.wait(dart.void, futures) : null;
      }
      onListen(sink) {
        EventSinkOfR().as(sink);
        let index = 0;
        let mapper = dart.fn(stream => {
          let t0;
          let i = (t0 = index, index = t0 + 1, t0);
          return stream.listen(dart.fn(it => {
            this[_hasValues][$_set](i, true);
            this[_latestValues][$_set](i, it);
          }, TTovoid()), {onError: dart.bind(sink, 'addError')});
        }, StreamOfTToStreamSubscriptionOfT());
        this[_subscriptions] = this[_latestFromStreams$][$map](StreamSubscriptionOfT(), mapper)[$toList]({growable: false});
      }
      onPause(sink) {
        let t0;
        EventSinkOfR().as(sink);
        t0 = this[_subscriptions];
        return t0 == null ? null : t0[$forEach](dart.fn(it => it.pause(), StreamSubscriptionOfTTovoid()));
      }
      onResume(sink) {
        let t0;
        EventSinkOfR().as(sink);
        t0 = this[_subscriptions];
        return t0 == null ? null : t0[$forEach](dart.fn(it => it.resume(), StreamSubscriptionOfTTovoid()));
      }
    }
    (_WithLatestFromStreamSink.new = function(_latestFromStreams, _combiner) {
      this[_subscriptions] = null;
      this[_latestFromStreams$] = _latestFromStreams;
      this[_combiner$] = _combiner;
      this[_hasValues] = T$.ListOfbool().filled(_latestFromStreams[$length], false);
      this[_latestValues] = ListOfTN().filled(_latestFromStreams[$length], null);
      ;
    }).prototype = _WithLatestFromStreamSink.prototype;
    dart.addTypeTests(_WithLatestFromStreamSink);
    _WithLatestFromStreamSink.prototype[_is__WithLatestFromStreamSink_default] = true;
    dart.addTypeCaches(_WithLatestFromStreamSink);
    _WithLatestFromStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(S, R)];
    dart.setMethodSignature(_WithLatestFromStreamSink, () => ({
      __proto__: dart.getMethods(_WithLatestFromStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [dart.nullable(core.Object), core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_WithLatestFromStreamSink, I[0]);
    dart.setFieldSignature(_WithLatestFromStreamSink, () => ({
      __proto__: dart.getFields(_WithLatestFromStreamSink.__proto__),
      [_latestFromStreams$]: dart.finalFieldType(core.Iterable$(async.Stream$(T))),
      [_combiner$]: dart.finalFieldType(dart.fnType(R, [S, core.List$(T)])),
      [_hasValues]: dart.finalFieldType(core.List$(core.bool)),
      [_latestValues]: dart.finalFieldType(core.List$(dart.nullable(T))),
      [_subscriptions]: dart.fieldType(dart.nullable(core.List$(async.StreamSubscription$(T))))
    }));
    return _WithLatestFromStreamSink;
  });
  with_latest_from._WithLatestFromStreamSink = with_latest_from._WithLatestFromStreamSink$();
  dart.addTypeTests(with_latest_from._WithLatestFromStreamSink, _is__WithLatestFromStreamSink_default);
  var latestFromStreams$ = dart.privateName(with_latest_from, "WithLatestFromStreamTransformer.latestFromStreams");
  var combiner$ = dart.privateName(with_latest_from, "WithLatestFromStreamTransformer.combiner");
  const _is_WithLatestFromStreamTransformer_default = Symbol('_is_WithLatestFromStreamTransformer_default');
  with_latest_from.WithLatestFromStreamTransformer$ = dart.generic((S, T, R) => {
    var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
    var _WithLatestFromStreamSinkOfS$T$R = () => (_WithLatestFromStreamSinkOfS$T$R = dart.constFn(with_latest_from._WithLatestFromStreamSink$(S, T, R)))();
    class WithLatestFromStreamTransformer extends async.StreamTransformerBase$(S, R) {
      get latestFromStreams() {
        return this[latestFromStreams$];
      }
      set latestFromStreams(value) {
        super.latestFromStreams = value;
      }
      get combiner() {
        return this[combiner$];
      }
      set combiner(value) {
        super.combiner = value;
      }
      static withList(T, latestFromStreams) {
        return new (with_latest_from.WithLatestFromStreamTransformer$(T, T, core.List$(T))).new(latestFromStreams, dart.fn((s, values) => (() => {
          let t0 = _interceptors.JSArray$(T).of([s]);
          t0[$addAll](values);
          return t0;
        })(), dart.fnType(core.List$(T), [T, core.List$(T)])));
      }
      static with1(T, S, R, latestFromStream, fn) {
        return new (with_latest_from.WithLatestFromStreamTransformer$(T, S, R)).new(_interceptors.JSArray$(async.Stream$(S)).of([latestFromStream]), dart.fn((s, values) => fn(s, values[$_get](0)), dart.fnType(R, [T, core.List$(S)])));
      }
      static with2(T, A, B, R, latestFromStream1, latestFromStream2, fn) {
        return new (with_latest_from.WithLatestFromStreamTransformer$(T, dart.dynamic, R)).new(T$.JSArrayOfStream().of([latestFromStream1, latestFromStream2]), dart.fn((s, values) => fn(s, A.as(values[$_get](0)), B.as(values[$_get](1))), dart.fnType(R, [T, core.List])));
      }
      static with3(T, A, B, C, R, latestFromStream1, latestFromStream2, latestFromStream3, fn) {
        return new (with_latest_from.WithLatestFromStreamTransformer$(T, dart.dynamic, R)).new(T$.JSArrayOfStream().of([latestFromStream1, latestFromStream2, latestFromStream3]), dart.fn((s, values) => fn(s, A.as(values[$_get](0)), B.as(values[$_get](1)), C.as(values[$_get](2))), dart.fnType(R, [T, core.List])));
      }
      static with4(T, A, B, C, D, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, fn) {
        return new (with_latest_from.WithLatestFromStreamTransformer$(T, dart.dynamic, R)).new(T$.JSArrayOfStream().of([latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4]), dart.fn((s, values) => fn(s, A.as(values[$_get](0)), B.as(values[$_get](1)), C.as(values[$_get](2)), D.as(values[$_get](3))), dart.fnType(R, [T, core.List])));
      }
      static with5(T, A, B, C, D, E, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, fn) {
        return new (with_latest_from.WithLatestFromStreamTransformer$(T, dart.dynamic, R)).new(T$.JSArrayOfStream().of([latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5]), dart.fn((s, values) => fn(s, A.as(values[$_get](0)), B.as(values[$_get](1)), C.as(values[$_get](2)), D.as(values[$_get](3)), E.as(values[$_get](4))), dart.fnType(R, [T, core.List])));
      }
      static with6(T, A, B, C, D, E, F, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, fn) {
        return new (with_latest_from.WithLatestFromStreamTransformer$(T, dart.dynamic, R)).new(T$.JSArrayOfStream().of([latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6]), dart.fn((s, values) => fn(s, A.as(values[$_get](0)), B.as(values[$_get](1)), C.as(values[$_get](2)), D.as(values[$_get](3)), E.as(values[$_get](4)), F.as(values[$_get](5))), dart.fnType(R, [T, core.List])));
      }
      static with7(T, A, B, C, D, E, F, G, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, fn) {
        return new (with_latest_from.WithLatestFromStreamTransformer$(T, dart.dynamic, R)).new(T$.JSArrayOfStream().of([latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7]), dart.fn((s, values) => fn(s, A.as(values[$_get](0)), B.as(values[$_get](1)), C.as(values[$_get](2)), D.as(values[$_get](3)), E.as(values[$_get](4)), F.as(values[$_get](5)), G.as(values[$_get](6))), dart.fnType(R, [T, core.List])));
      }
      static with8(T, A, B, C, D, E, F, G, H, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, fn) {
        return new (with_latest_from.WithLatestFromStreamTransformer$(T, dart.dynamic, R)).new(T$.JSArrayOfStream().of([latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8]), dart.fn((s, values) => fn(s, A.as(values[$_get](0)), B.as(values[$_get](1)), C.as(values[$_get](2)), D.as(values[$_get](3)), E.as(values[$_get](4)), F.as(values[$_get](5)), G.as(values[$_get](6)), H.as(values[$_get](7))), dart.fnType(R, [T, core.List])));
      }
      static with9(T, A, B, C, D, E, F, G, H, I, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, latestFromStream9, fn) {
        return new (with_latest_from.WithLatestFromStreamTransformer$(T, dart.dynamic, R)).new(T$.JSArrayOfStream().of([latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, latestFromStream9]), dart.fn((s, values) => fn(s, A.as(values[$_get](0)), B.as(values[$_get](1)), C.as(values[$_get](2)), D.as(values[$_get](3)), E.as(values[$_get](4)), F.as(values[$_get](5)), G.as(values[$_get](6)), H.as(values[$_get](7)), I.as(values[$_get](8))), dart.fnType(R, [T, core.List])));
      }
      bind(stream) {
        StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, R, stream, new (_WithLatestFromStreamSinkOfS$T$R()).new(this.latestFromStreams, this.combiner));
      }
    }
    (WithLatestFromStreamTransformer.new = function(latestFromStreams, combiner) {
      this[latestFromStreams$] = latestFromStreams;
      this[combiner$] = combiner;
      WithLatestFromStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = WithLatestFromStreamTransformer.prototype;
    dart.addTypeTests(WithLatestFromStreamTransformer);
    WithLatestFromStreamTransformer.prototype[_is_WithLatestFromStreamTransformer_default] = true;
    dart.addTypeCaches(WithLatestFromStreamTransformer);
    dart.setMethodSignature(WithLatestFromStreamTransformer, () => ({
      __proto__: dart.getMethods(WithLatestFromStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(R), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(WithLatestFromStreamTransformer, I[0]);
    dart.setFieldSignature(WithLatestFromStreamTransformer, () => ({
      __proto__: dart.getFields(WithLatestFromStreamTransformer.__proto__),
      latestFromStreams: dart.finalFieldType(core.Iterable$(async.Stream$(T))),
      combiner: dart.finalFieldType(dart.fnType(R, [S, core.List$(T)]))
    }));
    return WithLatestFromStreamTransformer;
  });
  with_latest_from.WithLatestFromStreamTransformer = with_latest_from.WithLatestFromStreamTransformer$();
  dart.addTypeTests(with_latest_from.WithLatestFromStreamTransformer, _is_WithLatestFromStreamTransformer_default);
  with_latest_from['WithLatestFromExtensions|withLatestFrom'] = function WithLatestFromExtensions$124withLatestFrom(T, S, R, $this, latestFromStream, fn) {
    return $this.transform(R, with_latest_from.WithLatestFromStreamTransformer.with1(T, S, R, latestFromStream, fn));
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom'] = function WithLatestFromExtensions$124get$35withLatestFrom(T, $this) {
    return dart.fn((S, R, latestFromStream, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom'](T, S, R, $this, latestFromStream, fn), dart.gFnType((S, R) => {
      var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
      var StreamOfR = () => (StreamOfR = dart.constFn(async.Stream$(R)))();
      return [StreamOfR(), [StreamOfS(), dart.fnType(R, [T, S])]];
    }, (S, R) => {
      var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
      var StreamOfR = () => (StreamOfR = dart.constFn(async.Stream$(R)))();
      return [T$.ObjectN(), T$.ObjectN()];
    }));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFromList'] = function WithLatestFromExtensions$124withLatestFromList(T, $this, latestFromStreams) {
    return $this.transform(core.List$(T), with_latest_from.WithLatestFromStreamTransformer.withList(T, latestFromStreams));
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFromList'] = function WithLatestFromExtensions$124get$35withLatestFromList(T, $this) {
    return dart.fn(latestFromStreams => with_latest_from['WithLatestFromExtensions|withLatestFromList'](T, $this, latestFromStreams), dart.fnType(async.Stream$(core.List$(T)), [core.Iterable$(async.Stream$(T))]));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFrom2'] = function WithLatestFromExtensions$124withLatestFrom2(T, A, B, R, $this, latestFromStream1, latestFromStream2, fn) {
    return $this.transform(R, with_latest_from.WithLatestFromStreamTransformer.with2(T, A, B, R, latestFromStream1, latestFromStream2, fn));
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom2'] = function WithLatestFromExtensions$124get$35withLatestFrom2(T, $this) {
    return dart.fn((A, B, R, latestFromStream1, latestFromStream2, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom2'](T, A, B, R, $this, latestFromStream1, latestFromStream2, fn), dart.gFnType((A, B, R) => {
      var StreamOfA = () => (StreamOfA = dart.constFn(async.Stream$(A)))();
      var StreamOfB = () => (StreamOfB = dart.constFn(async.Stream$(B)))();
      var StreamOfR = () => (StreamOfR = dart.constFn(async.Stream$(R)))();
      return [StreamOfR(), [StreamOfA(), StreamOfB(), dart.fnType(R, [T, A, B])]];
    }, (A, B, R) => {
      var StreamOfA = () => (StreamOfA = dart.constFn(async.Stream$(A)))();
      var StreamOfB = () => (StreamOfB = dart.constFn(async.Stream$(B)))();
      var StreamOfR = () => (StreamOfR = dart.constFn(async.Stream$(R)))();
      return [T$.ObjectN(), T$.ObjectN(), T$.ObjectN()];
    }));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFrom3'] = function WithLatestFromExtensions$124withLatestFrom3(T, A, B, C, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, fn) {
    return $this.transform(R, with_latest_from.WithLatestFromStreamTransformer.with3(T, A, B, C, R, latestFromStream1, latestFromStream2, latestFromStream3, fn));
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom3'] = function WithLatestFromExtensions$124get$35withLatestFrom3(T, $this) {
    return dart.fn((A, B, C, R, latestFromStream1, latestFromStream2, latestFromStream3, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom3'](T, A, B, C, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, fn), dart.gFnType((A, B, C, R) => {
      var StreamOfA = () => (StreamOfA = dart.constFn(async.Stream$(A)))();
      var StreamOfB = () => (StreamOfB = dart.constFn(async.Stream$(B)))();
      var StreamOfC = () => (StreamOfC = dart.constFn(async.Stream$(C)))();
      var StreamOfR = () => (StreamOfR = dart.constFn(async.Stream$(R)))();
      return [StreamOfR(), [StreamOfA(), StreamOfB(), StreamOfC(), dart.fnType(R, [T, A, B, C])]];
    }, (A, B, C, R) => {
      var StreamOfA = () => (StreamOfA = dart.constFn(async.Stream$(A)))();
      var StreamOfB = () => (StreamOfB = dart.constFn(async.Stream$(B)))();
      var StreamOfC = () => (StreamOfC = dart.constFn(async.Stream$(C)))();
      var StreamOfR = () => (StreamOfR = dart.constFn(async.Stream$(R)))();
      return [T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN()];
    }));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFrom4'] = function WithLatestFromExtensions$124withLatestFrom4(T, A, B, C, D, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, fn) {
    return $this.transform(R, with_latest_from.WithLatestFromStreamTransformer.with4(T, A, B, C, D, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, fn));
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom4'] = function WithLatestFromExtensions$124get$35withLatestFrom4(T, $this) {
    return dart.fn((A, B, C, D, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom4'](T, A, B, C, D, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, fn), dart.gFnType((A, B, C, D, R) => {
      var StreamOfA = () => (StreamOfA = dart.constFn(async.Stream$(A)))();
      var StreamOfB = () => (StreamOfB = dart.constFn(async.Stream$(B)))();
      var StreamOfC = () => (StreamOfC = dart.constFn(async.Stream$(C)))();
      var StreamOfD = () => (StreamOfD = dart.constFn(async.Stream$(D)))();
      var StreamOfR = () => (StreamOfR = dart.constFn(async.Stream$(R)))();
      return [StreamOfR(), [StreamOfA(), StreamOfB(), StreamOfC(), StreamOfD(), dart.fnType(R, [T, A, B, C, D])]];
    }, (A, B, C, D, R) => {
      var StreamOfA = () => (StreamOfA = dart.constFn(async.Stream$(A)))();
      var StreamOfB = () => (StreamOfB = dart.constFn(async.Stream$(B)))();
      var StreamOfC = () => (StreamOfC = dart.constFn(async.Stream$(C)))();
      var StreamOfD = () => (StreamOfD = dart.constFn(async.Stream$(D)))();
      var StreamOfR = () => (StreamOfR = dart.constFn(async.Stream$(R)))();
      return [T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN()];
    }));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFrom5'] = function WithLatestFromExtensions$124withLatestFrom5(T, A, B, C, D, E, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, fn) {
    return $this.transform(R, with_latest_from.WithLatestFromStreamTransformer.with5(T, A, B, C, D, E, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, fn));
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom5'] = function WithLatestFromExtensions$124get$35withLatestFrom5(T, $this) {
    return dart.fn((A, B, C, D, E, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom5'](T, A, B, C, D, E, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, fn), dart.gFnType((A, B, C, D, E, R) => {
      var StreamOfA = () => (StreamOfA = dart.constFn(async.Stream$(A)))();
      var StreamOfB = () => (StreamOfB = dart.constFn(async.Stream$(B)))();
      var StreamOfC = () => (StreamOfC = dart.constFn(async.Stream$(C)))();
      var StreamOfD = () => (StreamOfD = dart.constFn(async.Stream$(D)))();
      var StreamOfE = () => (StreamOfE = dart.constFn(async.Stream$(E)))();
      var StreamOfR = () => (StreamOfR = dart.constFn(async.Stream$(R)))();
      return [StreamOfR(), [StreamOfA(), StreamOfB(), StreamOfC(), StreamOfD(), StreamOfE(), dart.fnType(R, [T, A, B, C, D, E])]];
    }, (A, B, C, D, E, R) => {
      var StreamOfA = () => (StreamOfA = dart.constFn(async.Stream$(A)))();
      var StreamOfB = () => (StreamOfB = dart.constFn(async.Stream$(B)))();
      var StreamOfC = () => (StreamOfC = dart.constFn(async.Stream$(C)))();
      var StreamOfD = () => (StreamOfD = dart.constFn(async.Stream$(D)))();
      var StreamOfE = () => (StreamOfE = dart.constFn(async.Stream$(E)))();
      var StreamOfR = () => (StreamOfR = dart.constFn(async.Stream$(R)))();
      return [T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN()];
    }));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFrom6'] = function WithLatestFromExtensions$124withLatestFrom6(T, A, B, C, D, E, F, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, fn) {
    return $this.transform(R, with_latest_from.WithLatestFromStreamTransformer.with6(T, A, B, C, D, E, F, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, fn));
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom6'] = function WithLatestFromExtensions$124get$35withLatestFrom6(T, $this) {
    return dart.fn((A, B, C, D, E, F, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom6'](T, A, B, C, D, E, F, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, fn), dart.gFnType((A, B, C, D, E, F, R) => {
      var StreamOfA = () => (StreamOfA = dart.constFn(async.Stream$(A)))();
      var StreamOfB = () => (StreamOfB = dart.constFn(async.Stream$(B)))();
      var StreamOfC = () => (StreamOfC = dart.constFn(async.Stream$(C)))();
      var StreamOfD = () => (StreamOfD = dart.constFn(async.Stream$(D)))();
      var StreamOfE = () => (StreamOfE = dart.constFn(async.Stream$(E)))();
      var StreamOfF = () => (StreamOfF = dart.constFn(async.Stream$(F)))();
      var StreamOfR = () => (StreamOfR = dart.constFn(async.Stream$(R)))();
      return [StreamOfR(), [StreamOfA(), StreamOfB(), StreamOfC(), StreamOfD(), StreamOfE(), StreamOfF(), dart.fnType(R, [T, A, B, C, D, E, F])]];
    }, (A, B, C, D, E, F, R) => {
      var StreamOfA = () => (StreamOfA = dart.constFn(async.Stream$(A)))();
      var StreamOfB = () => (StreamOfB = dart.constFn(async.Stream$(B)))();
      var StreamOfC = () => (StreamOfC = dart.constFn(async.Stream$(C)))();
      var StreamOfD = () => (StreamOfD = dart.constFn(async.Stream$(D)))();
      var StreamOfE = () => (StreamOfE = dart.constFn(async.Stream$(E)))();
      var StreamOfF = () => (StreamOfF = dart.constFn(async.Stream$(F)))();
      var StreamOfR = () => (StreamOfR = dart.constFn(async.Stream$(R)))();
      return [T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN()];
    }));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFrom7'] = function WithLatestFromExtensions$124withLatestFrom7(T, A, B, C, D, E, F, G, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, fn) {
    return $this.transform(R, with_latest_from.WithLatestFromStreamTransformer.with7(T, A, B, C, D, E, F, G, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, fn));
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom7'] = function WithLatestFromExtensions$124get$35withLatestFrom7(T, $this) {
    return dart.fn((A, B, C, D, E, F, G, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom7'](T, A, B, C, D, E, F, G, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, fn), dart.gFnType((A, B, C, D, E, F, G, R) => {
      var StreamOfA = () => (StreamOfA = dart.constFn(async.Stream$(A)))();
      var StreamOfB = () => (StreamOfB = dart.constFn(async.Stream$(B)))();
      var StreamOfC = () => (StreamOfC = dart.constFn(async.Stream$(C)))();
      var StreamOfD = () => (StreamOfD = dart.constFn(async.Stream$(D)))();
      var StreamOfE = () => (StreamOfE = dart.constFn(async.Stream$(E)))();
      var StreamOfF = () => (StreamOfF = dart.constFn(async.Stream$(F)))();
      var StreamOfG = () => (StreamOfG = dart.constFn(async.Stream$(G)))();
      var StreamOfR = () => (StreamOfR = dart.constFn(async.Stream$(R)))();
      return [StreamOfR(), [StreamOfA(), StreamOfB(), StreamOfC(), StreamOfD(), StreamOfE(), StreamOfF(), StreamOfG(), dart.fnType(R, [T, A, B, C, D, E, F, G])]];
    }, (A, B, C, D, E, F, G, R) => {
      var StreamOfA = () => (StreamOfA = dart.constFn(async.Stream$(A)))();
      var StreamOfB = () => (StreamOfB = dart.constFn(async.Stream$(B)))();
      var StreamOfC = () => (StreamOfC = dart.constFn(async.Stream$(C)))();
      var StreamOfD = () => (StreamOfD = dart.constFn(async.Stream$(D)))();
      var StreamOfE = () => (StreamOfE = dart.constFn(async.Stream$(E)))();
      var StreamOfF = () => (StreamOfF = dart.constFn(async.Stream$(F)))();
      var StreamOfG = () => (StreamOfG = dart.constFn(async.Stream$(G)))();
      var StreamOfR = () => (StreamOfR = dart.constFn(async.Stream$(R)))();
      return [T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN()];
    }));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFrom8'] = function WithLatestFromExtensions$124withLatestFrom8(T, A, B, C, D, E, F, G, H, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, fn) {
    return $this.transform(R, with_latest_from.WithLatestFromStreamTransformer.with8(T, A, B, C, D, E, F, G, H, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, fn));
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom8'] = function WithLatestFromExtensions$124get$35withLatestFrom8(T, $this) {
    return dart.fn((A, B, C, D, E, F, G, H, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom8'](T, A, B, C, D, E, F, G, H, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, fn), dart.gFnType((A, B, C, D, E, F, G, H, R) => {
      var StreamOfA = () => (StreamOfA = dart.constFn(async.Stream$(A)))();
      var StreamOfB = () => (StreamOfB = dart.constFn(async.Stream$(B)))();
      var StreamOfC = () => (StreamOfC = dart.constFn(async.Stream$(C)))();
      var StreamOfD = () => (StreamOfD = dart.constFn(async.Stream$(D)))();
      var StreamOfE = () => (StreamOfE = dart.constFn(async.Stream$(E)))();
      var StreamOfF = () => (StreamOfF = dart.constFn(async.Stream$(F)))();
      var StreamOfG = () => (StreamOfG = dart.constFn(async.Stream$(G)))();
      var StreamOfH = () => (StreamOfH = dart.constFn(async.Stream$(H)))();
      var StreamOfR = () => (StreamOfR = dart.constFn(async.Stream$(R)))();
      return [StreamOfR(), [StreamOfA(), StreamOfB(), StreamOfC(), StreamOfD(), StreamOfE(), StreamOfF(), StreamOfG(), StreamOfH(), dart.fnType(R, [T, A, B, C, D, E, F, G, H])]];
    }, (A, B, C, D, E, F, G, H, R) => {
      var StreamOfA = () => (StreamOfA = dart.constFn(async.Stream$(A)))();
      var StreamOfB = () => (StreamOfB = dart.constFn(async.Stream$(B)))();
      var StreamOfC = () => (StreamOfC = dart.constFn(async.Stream$(C)))();
      var StreamOfD = () => (StreamOfD = dart.constFn(async.Stream$(D)))();
      var StreamOfE = () => (StreamOfE = dart.constFn(async.Stream$(E)))();
      var StreamOfF = () => (StreamOfF = dart.constFn(async.Stream$(F)))();
      var StreamOfG = () => (StreamOfG = dart.constFn(async.Stream$(G)))();
      var StreamOfH = () => (StreamOfH = dart.constFn(async.Stream$(H)))();
      var StreamOfR = () => (StreamOfR = dart.constFn(async.Stream$(R)))();
      return [T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN()];
    }));
  };
  with_latest_from['WithLatestFromExtensions|withLatestFrom9'] = function WithLatestFromExtensions$124withLatestFrom9(T, A, B, C, D, E, F, G, H, I, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, latestFromStream9, fn) {
    return $this.transform(R, with_latest_from.WithLatestFromStreamTransformer.with9(T, A, B, C, D, E, F, G, H, I, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, latestFromStream9, fn));
  };
  with_latest_from['WithLatestFromExtensions|get#withLatestFrom9'] = function WithLatestFromExtensions$124get$35withLatestFrom9(T, $this) {
    return dart.fn((A, B, C, D, E, F, G, H, I, R, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, latestFromStream9, fn) => with_latest_from['WithLatestFromExtensions|withLatestFrom9'](T, A, B, C, D, E, F, G, H, I, R, $this, latestFromStream1, latestFromStream2, latestFromStream3, latestFromStream4, latestFromStream5, latestFromStream6, latestFromStream7, latestFromStream8, latestFromStream9, fn), dart.gFnType((A, B, C, D, E, F, G, H, I, R) => {
      var StreamOfA = () => (StreamOfA = dart.constFn(async.Stream$(A)))();
      var StreamOfB = () => (StreamOfB = dart.constFn(async.Stream$(B)))();
      var StreamOfC = () => (StreamOfC = dart.constFn(async.Stream$(C)))();
      var StreamOfD = () => (StreamOfD = dart.constFn(async.Stream$(D)))();
      var StreamOfE = () => (StreamOfE = dart.constFn(async.Stream$(E)))();
      var StreamOfF = () => (StreamOfF = dart.constFn(async.Stream$(F)))();
      var StreamOfG = () => (StreamOfG = dart.constFn(async.Stream$(G)))();
      var StreamOfH = () => (StreamOfH = dart.constFn(async.Stream$(H)))();
      var StreamOfI = () => (StreamOfI = dart.constFn(async.Stream$(I)))();
      var StreamOfR = () => (StreamOfR = dart.constFn(async.Stream$(R)))();
      return [StreamOfR(), [StreamOfA(), StreamOfB(), StreamOfC(), StreamOfD(), StreamOfE(), StreamOfF(), StreamOfG(), StreamOfH(), StreamOfI(), dart.fnType(R, [T, A, B, C, D, E, F, G, H, I])]];
    }, (A, B, C, D, E, F, G, H, I, R) => {
      var StreamOfA = () => (StreamOfA = dart.constFn(async.Stream$(A)))();
      var StreamOfB = () => (StreamOfB = dart.constFn(async.Stream$(B)))();
      var StreamOfC = () => (StreamOfC = dart.constFn(async.Stream$(C)))();
      var StreamOfD = () => (StreamOfD = dart.constFn(async.Stream$(D)))();
      var StreamOfE = () => (StreamOfE = dart.constFn(async.Stream$(E)))();
      var StreamOfF = () => (StreamOfF = dart.constFn(async.Stream$(F)))();
      var StreamOfG = () => (StreamOfG = dart.constFn(async.Stream$(G)))();
      var StreamOfH = () => (StreamOfH = dart.constFn(async.Stream$(H)))();
      var StreamOfI = () => (StreamOfI = dart.constFn(async.Stream$(I)))();
      var StreamOfR = () => (StreamOfR = dart.constFn(async.Stream$(R)))();
      return [T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN(), T$.ObjectN()];
    }));
  };
  var _stopwatch = dart.privateName(time_interval, "_stopwatch");
  const _is__TimeIntervalStreamSink_default = Symbol('_is__TimeIntervalStreamSink_default');
  time_interval._TimeIntervalStreamSink$ = dart.generic(S => {
    var TimeIntervalOfS = () => (TimeIntervalOfS = dart.constFn(time_interval.TimeInterval$(S)))();
    var EventSinkOfTimeIntervalOfS = () => (EventSinkOfTimeIntervalOfS = dart.constFn(async.EventSink$(TimeIntervalOfS())))();
    class _TimeIntervalStreamSink extends core.Object {
      add(sink, data) {
        let t21;
        EventSinkOfTimeIntervalOfS().as(sink);
        S.as(data);
        this[_stopwatch].stop();
        sink.add(new (TimeIntervalOfS()).new(data, new core.Duration.new({microseconds: this[_stopwatch].elapsedMicroseconds})));
        t21 = this[_stopwatch];
        (() => {
          t21.reset();
          t21.start();
          return t21;
        })();
      }
      addError(sink, e, st = null) {
        EventSinkOfTimeIntervalOfS().as(sink);
        return sink.addError(e, st);
      }
      close(sink) {
        EventSinkOfTimeIntervalOfS().as(sink);
        return sink.close();
      }
      onCancel(sink) {
        EventSinkOfTimeIntervalOfS().as(sink);
      }
      onListen(sink) {
        EventSinkOfTimeIntervalOfS().as(sink);
        return this[_stopwatch].start();
      }
      onPause(sink) {
        EventSinkOfTimeIntervalOfS().as(sink);
      }
      onResume(sink) {
        EventSinkOfTimeIntervalOfS().as(sink);
      }
    }
    (_TimeIntervalStreamSink.new = function() {
      this[_stopwatch] = new core.Stopwatch.new();
      ;
    }).prototype = _TimeIntervalStreamSink.prototype;
    dart.addTypeTests(_TimeIntervalStreamSink);
    _TimeIntervalStreamSink.prototype[_is__TimeIntervalStreamSink_default] = true;
    dart.addTypeCaches(_TimeIntervalStreamSink);
    _TimeIntervalStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(S, time_interval.TimeInterval$(S))];
    dart.setMethodSignature(_TimeIntervalStreamSink, () => ({
      __proto__: dart.getMethods(_TimeIntervalStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [dart.nullable(core.Object), core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_TimeIntervalStreamSink, I[1]);
    dart.setFieldSignature(_TimeIntervalStreamSink, () => ({
      __proto__: dart.getFields(_TimeIntervalStreamSink.__proto__),
      [_stopwatch]: dart.finalFieldType(core.Stopwatch)
    }));
    return _TimeIntervalStreamSink;
  });
  time_interval._TimeIntervalStreamSink = time_interval._TimeIntervalStreamSink$();
  dart.addTypeTests(time_interval._TimeIntervalStreamSink, _is__TimeIntervalStreamSink_default);
  var interval$ = dart.privateName(time_interval, "TimeInterval.interval");
  var value$ = dart.privateName(time_interval, "TimeInterval.value");
  const _is_TimeInterval_default = Symbol('_is_TimeInterval_default');
  time_interval.TimeInterval$ = dart.generic(T => {
    class TimeInterval extends core.Object {
      get interval() {
        return this[interval$];
      }
      set interval(value) {
        super.interval = value;
      }
      get value() {
        return this[value$];
      }
      set value(value) {
        super.value = value;
      }
      _equals(other) {
        if (other == null) return false;
        if (this === other) {
          return true;
        }
        return time_interval.TimeInterval.is(other) && this.interval._equals(other.interval) && dart.equals(this.value, other.value);
      }
      get hashCode() {
        return (this.interval.hashCode ^ dart.hashCode(this.value)) >>> 0;
      }
      toString() {
        return "TimeInterval{interval: " + dart.str(this.interval) + ", value: " + dart.str(this.value) + "}";
      }
    }
    (TimeInterval.new = function(value, interval) {
      this[value$] = value;
      this[interval$] = interval;
      ;
    }).prototype = TimeInterval.prototype;
    dart.addTypeTests(TimeInterval);
    TimeInterval.prototype[_is_TimeInterval_default] = true;
    dart.addTypeCaches(TimeInterval);
    dart.setLibraryUri(TimeInterval, I[1]);
    dart.setFieldSignature(TimeInterval, () => ({
      __proto__: dart.getFields(TimeInterval.__proto__),
      interval: dart.finalFieldType(core.Duration),
      value: dart.finalFieldType(T)
    }));
    dart.defineExtensionMethods(TimeInterval, ['_equals', 'toString']);
    dart.defineExtensionAccessors(TimeInterval, ['hashCode']);
    return TimeInterval;
  });
  time_interval.TimeInterval = time_interval.TimeInterval$();
  dart.addTypeTests(time_interval.TimeInterval, _is_TimeInterval_default);
  const _is_TimeIntervalStreamTransformer_default = Symbol('_is_TimeIntervalStreamTransformer_default');
  time_interval.TimeIntervalStreamTransformer$ = dart.generic(S => {
    var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
    var TimeIntervalOfS = () => (TimeIntervalOfS = dart.constFn(time_interval.TimeInterval$(S)))();
    var _TimeIntervalStreamSinkOfS = () => (_TimeIntervalStreamSinkOfS = dart.constFn(time_interval._TimeIntervalStreamSink$(S)))();
    class TimeIntervalStreamTransformer extends async.StreamTransformerBase$(S, time_interval.TimeInterval$(S)) {
      bind(stream) {
        StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, TimeIntervalOfS(), stream, new (_TimeIntervalStreamSinkOfS()).new());
      }
    }
    (TimeIntervalStreamTransformer.new = function() {
      TimeIntervalStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = TimeIntervalStreamTransformer.prototype;
    dart.addTypeTests(TimeIntervalStreamTransformer);
    TimeIntervalStreamTransformer.prototype[_is_TimeIntervalStreamTransformer_default] = true;
    dart.addTypeCaches(TimeIntervalStreamTransformer);
    dart.setMethodSignature(TimeIntervalStreamTransformer, () => ({
      __proto__: dart.getMethods(TimeIntervalStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(time_interval.TimeInterval$(S)), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(TimeIntervalStreamTransformer, I[1]);
    return TimeIntervalStreamTransformer;
  });
  time_interval.TimeIntervalStreamTransformer = time_interval.TimeIntervalStreamTransformer$();
  dart.addTypeTests(time_interval.TimeIntervalStreamTransformer, _is_TimeIntervalStreamTransformer_default);
  time_interval['TimeIntervalExtension|timeInterval'] = function TimeIntervalExtension$124timeInterval(T, $this) {
    return $this.transform(time_interval.TimeInterval$(T), new (time_interval.TimeIntervalStreamTransformer$(T)).new());
  };
  time_interval['TimeIntervalExtension|get#timeInterval'] = function TimeIntervalExtension$124get$35timeInterval(T, $this) {
    return dart.fn(() => time_interval['TimeIntervalExtension|timeInterval'](T, $this), dart.fnType(async.Stream$(time_interval.TimeInterval$(T)), []));
  };
  var _otherSubscription = dart.privateName(take_until, "_otherSubscription");
  var _otherStream$ = dart.privateName(take_until, "_otherStream");
  const _is__TakeUntilStreamSink_default = Symbol('_is__TakeUntilStreamSink_default');
  take_until._TakeUntilStreamSink$ = dart.generic((S, T) => {
    var EventSinkOfS = () => (EventSinkOfS = dart.constFn(async.EventSink$(S)))();
    class _TakeUntilStreamSink extends core.Object {
      add(sink, data) {
        EventSinkOfS().as(sink);
        S.as(data);
        return sink.add(data);
      }
      addError(sink, e, st = null) {
        EventSinkOfS().as(sink);
        return sink.addError(e, st);
      }
      close(sink) {
        let t23;
        EventSinkOfS().as(sink);
        t23 = this[_otherSubscription];
        t23 == null ? null : t23.cancel();
        sink.close();
      }
      onCancel(sink) {
        let t23;
        EventSinkOfS().as(sink);
        t23 = this[_otherSubscription];
        return t23 == null ? null : t23.cancel();
      }
      onListen(sink) {
        EventSinkOfS().as(sink);
        return this[_otherSubscription] = this[_otherStream$].take(1).listen(null, {onError: dart.bind(sink, 'addError'), onDone: dart.bind(sink, 'close')});
      }
      onPause(sink) {
        let t23;
        EventSinkOfS().as(sink);
        t23 = this[_otherSubscription];
        return t23 == null ? null : t23.pause();
      }
      onResume(sink) {
        let t23;
        EventSinkOfS().as(sink);
        t23 = this[_otherSubscription];
        return t23 == null ? null : t23.resume();
      }
    }
    (_TakeUntilStreamSink.new = function(_otherStream) {
      this[_otherSubscription] = null;
      this[_otherStream$] = _otherStream;
      ;
    }).prototype = _TakeUntilStreamSink.prototype;
    dart.addTypeTests(_TakeUntilStreamSink);
    _TakeUntilStreamSink.prototype[_is__TakeUntilStreamSink_default] = true;
    dart.addTypeCaches(_TakeUntilStreamSink);
    _TakeUntilStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(S, S)];
    dart.setMethodSignature(_TakeUntilStreamSink, () => ({
      __proto__: dart.getMethods(_TakeUntilStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [dart.nullable(core.Object), core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_TakeUntilStreamSink, I[2]);
    dart.setFieldSignature(_TakeUntilStreamSink, () => ({
      __proto__: dart.getFields(_TakeUntilStreamSink.__proto__),
      [_otherStream$]: dart.finalFieldType(async.Stream$(T)),
      [_otherSubscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(T)))
    }));
    return _TakeUntilStreamSink;
  });
  take_until._TakeUntilStreamSink = take_until._TakeUntilStreamSink$();
  dart.addTypeTests(take_until._TakeUntilStreamSink, _is__TakeUntilStreamSink_default);
  var otherStream$ = dart.privateName(take_until, "TakeUntilStreamTransformer.otherStream");
  const _is_TakeUntilStreamTransformer_default = Symbol('_is_TakeUntilStreamTransformer_default');
  take_until.TakeUntilStreamTransformer$ = dart.generic((S, T) => {
    var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
    var _TakeUntilStreamSinkOfS$T = () => (_TakeUntilStreamSinkOfS$T = dart.constFn(take_until._TakeUntilStreamSink$(S, T)))();
    class TakeUntilStreamTransformer extends async.StreamTransformerBase$(S, S) {
      get otherStream() {
        return this[otherStream$];
      }
      set otherStream(value) {
        super.otherStream = value;
      }
      bind(stream) {
        StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, S, stream, new (_TakeUntilStreamSinkOfS$T()).new(this.otherStream));
      }
    }
    (TakeUntilStreamTransformer.new = function(otherStream) {
      this[otherStream$] = otherStream;
      TakeUntilStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = TakeUntilStreamTransformer.prototype;
    dart.addTypeTests(TakeUntilStreamTransformer);
    TakeUntilStreamTransformer.prototype[_is_TakeUntilStreamTransformer_default] = true;
    dart.addTypeCaches(TakeUntilStreamTransformer);
    dart.setMethodSignature(TakeUntilStreamTransformer, () => ({
      __proto__: dart.getMethods(TakeUntilStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(S), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(TakeUntilStreamTransformer, I[2]);
    dart.setFieldSignature(TakeUntilStreamTransformer, () => ({
      __proto__: dart.getFields(TakeUntilStreamTransformer.__proto__),
      otherStream: dart.finalFieldType(async.Stream$(T))
    }));
    return TakeUntilStreamTransformer;
  });
  take_until.TakeUntilStreamTransformer = take_until.TakeUntilStreamTransformer$();
  dart.addTypeTests(take_until.TakeUntilStreamTransformer, _is_TakeUntilStreamTransformer_default);
  take_until['TakeUntilExtension|takeUntil'] = function TakeUntilExtension$124takeUntil(T, S, $this, otherStream) {
    return $this.transform(T, new (take_until.TakeUntilStreamTransformer$(T, S)).new(otherStream));
  };
  take_until['TakeUntilExtension|get#takeUntil'] = function TakeUntilExtension$124get$35takeUntil(T, $this) {
    return dart.fn((S, otherStream) => take_until['TakeUntilExtension|takeUntil'](T, S, $this, otherStream), dart.gFnType(S => {
      var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
      return [async.Stream$(T), [StreamOfS()]];
    }, S => {
      var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
      return [T$.ObjectN()];
    }));
  };
  const _is__TakeLastStreamSink_default = Symbol('_is__TakeLastStreamSink_default');
  take_last._TakeLastStreamSink$ = dart.generic(T => {
    var DoubleLinkedQueueOfT = () => (DoubleLinkedQueueOfT = dart.constFn(collection.DoubleLinkedQueue$(T)))();
    var EventSinkOfT = () => (EventSinkOfT = dart.constFn(async.EventSink$(T)))();
    class _TakeLastStreamSink extends core.Object {
      add(sink, data) {
        EventSinkOfT().as(sink);
        T.as(data);
        if (this.count > 0) {
          this.queue.add(data);
          if (this.queue[$length] > this.count) {
            take_last['_RemoveFirstNQueueExtension|removeFirstElements'](T, this.queue, this.queue[$length] - this.count);
          }
        }
      }
      addError(sink, e, st = null) {
        EventSinkOfT().as(sink);
        return sink.addError(e, st);
      }
      close(sink) {
        EventSinkOfT().as(sink);
        this.queue[$forEach](dart.bind(sink, 'add'));
        sink.close();
      }
      onCancel(sink) {
        EventSinkOfT().as(sink);
        this.queue.clear();
      }
      onListen(sink) {
        EventSinkOfT().as(sink);
      }
      onPause(sink) {
        EventSinkOfT().as(sink);
      }
      onResume(sink) {
        EventSinkOfT().as(sink);
      }
    }
    (_TakeLastStreamSink.new = function(count) {
      this.queue = new (DoubleLinkedQueueOfT()).new();
      this.count = count;
      ;
    }).prototype = _TakeLastStreamSink.prototype;
    dart.addTypeTests(_TakeLastStreamSink);
    _TakeLastStreamSink.prototype[_is__TakeLastStreamSink_default] = true;
    dart.addTypeCaches(_TakeLastStreamSink);
    _TakeLastStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(T, T)];
    dart.setMethodSignature(_TakeLastStreamSink, () => ({
      __proto__: dart.getMethods(_TakeLastStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [dart.nullable(core.Object), core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_TakeLastStreamSink, I[3]);
    dart.setFieldSignature(_TakeLastStreamSink, () => ({
      __proto__: dart.getFields(_TakeLastStreamSink.__proto__),
      count: dart.finalFieldType(core.int),
      queue: dart.finalFieldType(collection.Queue$(T))
    }));
    return _TakeLastStreamSink;
  });
  take_last._TakeLastStreamSink = take_last._TakeLastStreamSink$();
  dart.addTypeTests(take_last._TakeLastStreamSink, _is__TakeLastStreamSink_default);
  var count$ = dart.privateName(take_last, "TakeLastStreamTransformer.count");
  const _is_TakeLastStreamTransformer_default = Symbol('_is_TakeLastStreamTransformer_default');
  take_last.TakeLastStreamTransformer$ = dart.generic(T => {
    var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
    var _TakeLastStreamSinkOfT = () => (_TakeLastStreamSinkOfT = dart.constFn(take_last._TakeLastStreamSink$(T)))();
    class TakeLastStreamTransformer extends async.StreamTransformerBase$(T, T) {
      get count() {
        return this[count$];
      }
      set count(value) {
        super.count = value;
      }
      bind(stream) {
        StreamOfT().as(stream);
        return forwarding_stream.forwardStream(T, T, stream, new (_TakeLastStreamSinkOfT()).new(this.count));
      }
    }
    (TakeLastStreamTransformer.new = function(count) {
      this[count$] = count;
      TakeLastStreamTransformer.__proto__.new.call(this);
      if (this.count < 0) dart.throw(new core.ArgumentError.value(this.count, "count"));
    }).prototype = TakeLastStreamTransformer.prototype;
    dart.addTypeTests(TakeLastStreamTransformer);
    TakeLastStreamTransformer.prototype[_is_TakeLastStreamTransformer_default] = true;
    dart.addTypeCaches(TakeLastStreamTransformer);
    dart.setMethodSignature(TakeLastStreamTransformer, () => ({
      __proto__: dart.getMethods(TakeLastStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(TakeLastStreamTransformer, I[3]);
    dart.setFieldSignature(TakeLastStreamTransformer, () => ({
      __proto__: dart.getFields(TakeLastStreamTransformer.__proto__),
      count: dart.finalFieldType(core.int)
    }));
    return TakeLastStreamTransformer;
  });
  take_last.TakeLastStreamTransformer = take_last.TakeLastStreamTransformer$();
  dart.addTypeTests(take_last.TakeLastStreamTransformer, _is_TakeLastStreamTransformer_default);
  take_last['TakeLastExtension|takeLast'] = function TakeLastExtension$124takeLast(T, $this, count) {
    return $this.transform(T, new (take_last.TakeLastStreamTransformer$(T)).new(count));
  };
  take_last['TakeLastExtension|get#takeLast'] = function TakeLastExtension$124get$35takeLast(T, $this) {
    return dart.fn(count => take_last['TakeLastExtension|takeLast'](T, $this, count), dart.fnType(async.Stream$(T), [core.int]));
  };
  take_last['_RemoveFirstNQueueExtension|removeFirstElements'] = function _RemoveFirstNQueueExtension$124removeFirstElements(T, $this, count) {
    for (let i = 0; i < count; i = i + 1) {
      $this.removeFirst();
    }
  };
  take_last['_RemoveFirstNQueueExtension|get#removeFirstElements'] = function _RemoveFirstNQueueExtension$124get$35removeFirstElements(T, $this) {
    return dart.fn(count => take_last['_RemoveFirstNQueueExtension|removeFirstElements'](T, $this, count), T$.intTovoid());
  };
  var _mapperSubscription = dart.privateName(switch_map, "_mapperSubscription");
  var _inputClosed = dart.privateName(switch_map, "_inputClosed");
  var _mapper$ = dart.privateName(switch_map, "_mapper");
  const _is__SwitchMapStreamSink_default = Symbol('_is__SwitchMapStreamSink_default');
  switch_map._SwitchMapStreamSink$ = dart.generic((S, T) => {
    var EventSinkOfT = () => (EventSinkOfT = dart.constFn(async.EventSink$(T)))();
    class _SwitchMapStreamSink extends core.Object {
      add(sink, data) {
        let t29, t29$;
        EventSinkOfT().as(sink);
        S.as(data);
        let mappedStream = (t29 = data, this[_mapper$](t29));
        t29$ = this[_mapperSubscription];
        t29$ == null ? null : t29$.cancel();
        this[_mapperSubscription] = mappedStream.listen(dart.bind(sink, 'add'), {onError: dart.bind(sink, 'addError'), onDone: dart.fn(() => {
            this[_mapperSubscription] = null;
            if (this[_inputClosed]) {
              sink.close();
            }
          }, T$.VoidTovoid())});
      }
      addError(sink, e, st = null) {
        EventSinkOfT().as(sink);
        return sink.addError(e, st);
      }
      close(sink) {
        let t29;
        EventSinkOfT().as(sink);
        this[_inputClosed] = true;
        t29 = this[_mapperSubscription];
        t29 == null ? sink.close() : t29;
      }
      onCancel(sink) {
        let t29;
        EventSinkOfT().as(sink);
        t29 = this[_mapperSubscription];
        return t29 == null ? null : t29.cancel();
      }
      onListen(sink) {
        EventSinkOfT().as(sink);
      }
      onPause(sink) {
        let t29;
        EventSinkOfT().as(sink);
        t29 = this[_mapperSubscription];
        return t29 == null ? null : t29.pause();
      }
      onResume(sink) {
        let t29;
        EventSinkOfT().as(sink);
        t29 = this[_mapperSubscription];
        return t29 == null ? null : t29.resume();
      }
    }
    (_SwitchMapStreamSink.new = function(_mapper) {
      this[_mapperSubscription] = null;
      this[_inputClosed] = false;
      this[_mapper$] = _mapper;
      ;
    }).prototype = _SwitchMapStreamSink.prototype;
    dart.addTypeTests(_SwitchMapStreamSink);
    _SwitchMapStreamSink.prototype[_is__SwitchMapStreamSink_default] = true;
    dart.addTypeCaches(_SwitchMapStreamSink);
    _SwitchMapStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(S, T)];
    dart.setMethodSignature(_SwitchMapStreamSink, () => ({
      __proto__: dart.getMethods(_SwitchMapStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [dart.nullable(core.Object), core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_SwitchMapStreamSink, I[4]);
    dart.setFieldSignature(_SwitchMapStreamSink, () => ({
      __proto__: dart.getFields(_SwitchMapStreamSink.__proto__),
      [_mapper$]: dart.finalFieldType(dart.fnType(async.Stream$(T), [S])),
      [_mapperSubscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(T))),
      [_inputClosed]: dart.fieldType(core.bool)
    }));
    return _SwitchMapStreamSink;
  });
  switch_map._SwitchMapStreamSink = switch_map._SwitchMapStreamSink$();
  dart.addTypeTests(switch_map._SwitchMapStreamSink, _is__SwitchMapStreamSink_default);
  var mapper$ = dart.privateName(switch_map, "SwitchMapStreamTransformer.mapper");
  const _is_SwitchMapStreamTransformer_default = Symbol('_is_SwitchMapStreamTransformer_default');
  switch_map.SwitchMapStreamTransformer$ = dart.generic((S, T) => {
    var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
    var _SwitchMapStreamSinkOfS$T = () => (_SwitchMapStreamSinkOfS$T = dart.constFn(switch_map._SwitchMapStreamSink$(S, T)))();
    class SwitchMapStreamTransformer extends async.StreamTransformerBase$(S, T) {
      get mapper() {
        return this[mapper$];
      }
      set mapper(value) {
        super.mapper = value;
      }
      bind(stream) {
        StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, T, stream, new (_SwitchMapStreamSinkOfS$T()).new(this.mapper));
      }
    }
    (SwitchMapStreamTransformer.new = function(mapper) {
      this[mapper$] = mapper;
      SwitchMapStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = SwitchMapStreamTransformer.prototype;
    dart.addTypeTests(SwitchMapStreamTransformer);
    SwitchMapStreamTransformer.prototype[_is_SwitchMapStreamTransformer_default] = true;
    dart.addTypeCaches(SwitchMapStreamTransformer);
    dart.setMethodSignature(SwitchMapStreamTransformer, () => ({
      __proto__: dart.getMethods(SwitchMapStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(SwitchMapStreamTransformer, I[4]);
    dart.setFieldSignature(SwitchMapStreamTransformer, () => ({
      __proto__: dart.getFields(SwitchMapStreamTransformer.__proto__),
      mapper: dart.finalFieldType(dart.fnType(async.Stream$(T), [S]))
    }));
    return SwitchMapStreamTransformer;
  });
  switch_map.SwitchMapStreamTransformer = switch_map.SwitchMapStreamTransformer$();
  dart.addTypeTests(switch_map.SwitchMapStreamTransformer, _is_SwitchMapStreamTransformer_default);
  switch_map['SwitchMapExtension|switchMap'] = function SwitchMapExtension$124switchMap(T, S, $this, mapper) {
    return $this.transform(S, new (switch_map.SwitchMapStreamTransformer$(T, S)).new(mapper));
  };
  switch_map['SwitchMapExtension|get#switchMap'] = function SwitchMapExtension$124get$35switchMap(T, $this) {
    return dart.fn((S, mapper) => switch_map['SwitchMapExtension|switchMap'](T, S, $this, mapper), dart.gFnType(S => {
      var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
      return [StreamOfS(), [dart.fnType(StreamOfS(), [T])]];
    }, S => {
      var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
      return [T$.ObjectN()];
    }));
  };
  var _isEmpty = dart.privateName(switch_if_empty, "_isEmpty");
  var _fallbackSubscription = dart.privateName(switch_if_empty, "_fallbackSubscription");
  var _fallbackStream$ = dart.privateName(switch_if_empty, "_fallbackStream");
  const _is__SwitchIfEmptyStreamSink_default = Symbol('_is__SwitchIfEmptyStreamSink_default');
  switch_if_empty._SwitchIfEmptyStreamSink$ = dart.generic(S => {
    var EventSinkOfS = () => (EventSinkOfS = dart.constFn(async.EventSink$(S)))();
    class _SwitchIfEmptyStreamSink extends core.Object {
      add(sink, data) {
        EventSinkOfS().as(sink);
        S.as(data);
        this[_isEmpty] = false;
        sink.add(data);
      }
      addError(sink, error, st = null) {
        EventSinkOfS().as(sink);
        sink.addError(error, st);
      }
      close(sink) {
        EventSinkOfS().as(sink);
        if (this[_isEmpty]) {
          this[_fallbackSubscription] = this[_fallbackStream$].listen(dart.bind(sink, 'add'), {onError: dart.bind(sink, 'addError'), onDone: dart.bind(sink, 'close')});
        } else {
          sink.close();
        }
      }
      onCancel(sink) {
        let t31;
        EventSinkOfS().as(sink);
        t31 = this[_fallbackSubscription];
        return t31 == null ? null : t31.cancel();
      }
      onListen(sink) {
        EventSinkOfS().as(sink);
      }
      onPause(sink) {
        let t31;
        EventSinkOfS().as(sink);
        t31 = this[_fallbackSubscription];
        return t31 == null ? null : t31.pause();
      }
      onResume(sink) {
        let t31;
        EventSinkOfS().as(sink);
        t31 = this[_fallbackSubscription];
        return t31 == null ? null : t31.resume();
      }
    }
    (_SwitchIfEmptyStreamSink.new = function(_fallbackStream) {
      this[_isEmpty] = true;
      this[_fallbackSubscription] = null;
      this[_fallbackStream$] = _fallbackStream;
      ;
    }).prototype = _SwitchIfEmptyStreamSink.prototype;
    dart.addTypeTests(_SwitchIfEmptyStreamSink);
    _SwitchIfEmptyStreamSink.prototype[_is__SwitchIfEmptyStreamSink_default] = true;
    dart.addTypeCaches(_SwitchIfEmptyStreamSink);
    _SwitchIfEmptyStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(S, S)];
    dart.setMethodSignature(_SwitchIfEmptyStreamSink, () => ({
      __proto__: dart.getMethods(_SwitchIfEmptyStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [dart.nullable(core.Object), core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_SwitchIfEmptyStreamSink, I[5]);
    dart.setFieldSignature(_SwitchIfEmptyStreamSink, () => ({
      __proto__: dart.getFields(_SwitchIfEmptyStreamSink.__proto__),
      [_fallbackStream$]: dart.finalFieldType(async.Stream$(S)),
      [_isEmpty]: dart.fieldType(core.bool),
      [_fallbackSubscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(S)))
    }));
    return _SwitchIfEmptyStreamSink;
  });
  switch_if_empty._SwitchIfEmptyStreamSink = switch_if_empty._SwitchIfEmptyStreamSink$();
  dart.addTypeTests(switch_if_empty._SwitchIfEmptyStreamSink, _is__SwitchIfEmptyStreamSink_default);
  var fallbackStream$ = dart.privateName(switch_if_empty, "SwitchIfEmptyStreamTransformer.fallbackStream");
  const _is_SwitchIfEmptyStreamTransformer_default = Symbol('_is_SwitchIfEmptyStreamTransformer_default');
  switch_if_empty.SwitchIfEmptyStreamTransformer$ = dart.generic(S => {
    var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
    var _SwitchIfEmptyStreamSinkOfS = () => (_SwitchIfEmptyStreamSinkOfS = dart.constFn(switch_if_empty._SwitchIfEmptyStreamSink$(S)))();
    class SwitchIfEmptyStreamTransformer extends async.StreamTransformerBase$(S, S) {
      get fallbackStream() {
        return this[fallbackStream$];
      }
      set fallbackStream(value) {
        super.fallbackStream = value;
      }
      bind(stream) {
        StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, S, stream, new (_SwitchIfEmptyStreamSinkOfS()).new(this.fallbackStream));
      }
    }
    (SwitchIfEmptyStreamTransformer.new = function(fallbackStream) {
      this[fallbackStream$] = fallbackStream;
      SwitchIfEmptyStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = SwitchIfEmptyStreamTransformer.prototype;
    dart.addTypeTests(SwitchIfEmptyStreamTransformer);
    SwitchIfEmptyStreamTransformer.prototype[_is_SwitchIfEmptyStreamTransformer_default] = true;
    dart.addTypeCaches(SwitchIfEmptyStreamTransformer);
    dart.setMethodSignature(SwitchIfEmptyStreamTransformer, () => ({
      __proto__: dart.getMethods(SwitchIfEmptyStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(S), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(SwitchIfEmptyStreamTransformer, I[5]);
    dart.setFieldSignature(SwitchIfEmptyStreamTransformer, () => ({
      __proto__: dart.getFields(SwitchIfEmptyStreamTransformer.__proto__),
      fallbackStream: dart.finalFieldType(async.Stream$(S))
    }));
    return SwitchIfEmptyStreamTransformer;
  });
  switch_if_empty.SwitchIfEmptyStreamTransformer = switch_if_empty.SwitchIfEmptyStreamTransformer$();
  dart.addTypeTests(switch_if_empty.SwitchIfEmptyStreamTransformer, _is_SwitchIfEmptyStreamTransformer_default);
  switch_if_empty['SwitchIfEmptyExtension|switchIfEmpty'] = function SwitchIfEmptyExtension$124switchIfEmpty(T, $this, fallbackStream) {
    return $this.transform(T, new (switch_if_empty.SwitchIfEmptyStreamTransformer$(T)).new(fallbackStream));
  };
  switch_if_empty['SwitchIfEmptyExtension|get#switchIfEmpty'] = function SwitchIfEmptyExtension$124get$35switchIfEmpty(T, $this) {
    return dart.fn(fallbackStream => switch_if_empty['SwitchIfEmptyExtension|switchIfEmpty'](T, $this, fallbackStream), dart.fnType(async.Stream$(T), [async.Stream$(T)]));
  };
  var _isFirstEventAdded = dart.privateName(start_with_many, "_isFirstEventAdded");
  var _startValues$ = dart.privateName(start_with_many, "_startValues");
  var _safeAddFirstEvent = dart.privateName(start_with_many, "_safeAddFirstEvent");
  const _is__StartWithManyStreamSink_default = Symbol('_is__StartWithManyStreamSink_default');
  start_with_many._StartWithManyStreamSink$ = dart.generic(S => {
    var EventSinkOfS = () => (EventSinkOfS = dart.constFn(async.EventSink$(S)))();
    class _StartWithManyStreamSink extends core.Object {
      add(sink, data) {
        EventSinkOfS().as(sink);
        S.as(data);
        this[_safeAddFirstEvent](sink);
        sink.add(data);
      }
      addError(sink, e, st = null) {
        EventSinkOfS().as(sink);
        this[_safeAddFirstEvent](sink);
        sink.addError(e, st);
      }
      close(sink) {
        EventSinkOfS().as(sink);
        this[_safeAddFirstEvent](sink);
        sink.close();
      }
      onCancel(sink) {
        EventSinkOfS().as(sink);
      }
      onListen(sink) {
        EventSinkOfS().as(sink);
        async.scheduleMicrotask(dart.fn(() => this[_safeAddFirstEvent](sink), T$.VoidTovoid()));
      }
      onPause(sink) {
        EventSinkOfS().as(sink);
      }
      onResume(sink) {
        EventSinkOfS().as(sink);
      }
      [_safeAddFirstEvent](sink) {
        if (this[_isFirstEventAdded]) return;
        this[_startValues$][$forEach](dart.bind(sink, 'add'));
        this[_isFirstEventAdded] = true;
      }
    }
    (_StartWithManyStreamSink.new = function(_startValues) {
      this[_isFirstEventAdded] = false;
      this[_startValues$] = _startValues;
      ;
    }).prototype = _StartWithManyStreamSink.prototype;
    dart.addTypeTests(_StartWithManyStreamSink);
    _StartWithManyStreamSink.prototype[_is__StartWithManyStreamSink_default] = true;
    dart.addTypeCaches(_StartWithManyStreamSink);
    _StartWithManyStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(S, S)];
    dart.setMethodSignature(_StartWithManyStreamSink, () => ({
      __proto__: dart.getMethods(_StartWithManyStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [dart.nullable(core.Object), core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [_safeAddFirstEvent]: dart.fnType(dart.void, [async.EventSink$(S)])
    }));
    dart.setLibraryUri(_StartWithManyStreamSink, I[6]);
    dart.setFieldSignature(_StartWithManyStreamSink, () => ({
      __proto__: dart.getFields(_StartWithManyStreamSink.__proto__),
      [_startValues$]: dart.finalFieldType(core.Iterable$(S)),
      [_isFirstEventAdded]: dart.fieldType(core.bool)
    }));
    return _StartWithManyStreamSink;
  });
  start_with_many._StartWithManyStreamSink = start_with_many._StartWithManyStreamSink$();
  dart.addTypeTests(start_with_many._StartWithManyStreamSink, _is__StartWithManyStreamSink_default);
  var startValues$ = dart.privateName(start_with_many, "StartWithManyStreamTransformer.startValues");
  const _is_StartWithManyStreamTransformer_default = Symbol('_is_StartWithManyStreamTransformer_default');
  start_with_many.StartWithManyStreamTransformer$ = dart.generic(S => {
    var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
    var _StartWithManyStreamSinkOfS = () => (_StartWithManyStreamSinkOfS = dart.constFn(start_with_many._StartWithManyStreamSink$(S)))();
    class StartWithManyStreamTransformer extends async.StreamTransformerBase$(S, S) {
      get startValues() {
        return this[startValues$];
      }
      set startValues(value) {
        super.startValues = value;
      }
      bind(stream) {
        StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, S, stream, new (_StartWithManyStreamSinkOfS()).new(this.startValues));
      }
    }
    (StartWithManyStreamTransformer.new = function(startValues) {
      this[startValues$] = startValues;
      StartWithManyStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = StartWithManyStreamTransformer.prototype;
    dart.addTypeTests(StartWithManyStreamTransformer);
    StartWithManyStreamTransformer.prototype[_is_StartWithManyStreamTransformer_default] = true;
    dart.addTypeCaches(StartWithManyStreamTransformer);
    dart.setMethodSignature(StartWithManyStreamTransformer, () => ({
      __proto__: dart.getMethods(StartWithManyStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(S), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(StartWithManyStreamTransformer, I[6]);
    dart.setFieldSignature(StartWithManyStreamTransformer, () => ({
      __proto__: dart.getFields(StartWithManyStreamTransformer.__proto__),
      startValues: dart.finalFieldType(core.Iterable$(S))
    }));
    return StartWithManyStreamTransformer;
  });
  start_with_many.StartWithManyStreamTransformer = start_with_many.StartWithManyStreamTransformer$();
  dart.addTypeTests(start_with_many.StartWithManyStreamTransformer, _is_StartWithManyStreamTransformer_default);
  start_with_many['StartWithManyExtension|startWithMany'] = function StartWithManyExtension$124startWithMany(T, $this, startValues) {
    return $this.transform(T, new (start_with_many.StartWithManyStreamTransformer$(T)).new(startValues));
  };
  start_with_many['StartWithManyExtension|get#startWithMany'] = function StartWithManyExtension$124get$35startWithMany(T, $this) {
    return dart.fn(startValues => start_with_many['StartWithManyExtension|startWithMany'](T, $this, startValues), dart.fnType(async.Stream$(T), [core.List$(T)]));
  };
  var _otherSubscription$ = dart.privateName(skip_until, "_otherSubscription");
  var _canAdd = dart.privateName(skip_until, "_canAdd");
  var _otherStream$0 = dart.privateName(skip_until, "_otherStream");
  const _is__SkipUntilStreamSink_default = Symbol('_is__SkipUntilStreamSink_default');
  skip_until._SkipUntilStreamSink$ = dart.generic((S, T) => {
    var EventSinkOfS = () => (EventSinkOfS = dart.constFn(async.EventSink$(S)))();
    class _SkipUntilStreamSink extends core.Object {
      add(sink, data) {
        EventSinkOfS().as(sink);
        S.as(data);
        if (this[_canAdd]) {
          sink.add(data);
        }
      }
      addError(sink, e, st = null) {
        EventSinkOfS().as(sink);
        return sink.addError(e, st);
      }
      close(sink) {
        let t35;
        EventSinkOfS().as(sink);
        t35 = this[_otherSubscription$];
        t35 == null ? null : t35.cancel();
        sink.close();
      }
      onCancel(sink) {
        let t35;
        EventSinkOfS().as(sink);
        t35 = this[_otherSubscription$];
        return t35 == null ? null : t35.cancel();
      }
      onListen(sink) {
        EventSinkOfS().as(sink);
        return this[_otherSubscription$] = this[_otherStream$0].take(1).listen(null, {onError: dart.bind(sink, 'addError'), onDone: dart.fn(() => this[_canAdd] = true, T$.VoidTovoid())});
      }
      onPause(sink) {
        let t35;
        EventSinkOfS().as(sink);
        t35 = this[_otherSubscription$];
        return t35 == null ? null : t35.pause();
      }
      onResume(sink) {
        let t35;
        EventSinkOfS().as(sink);
        t35 = this[_otherSubscription$];
        return t35 == null ? null : t35.resume();
      }
    }
    (_SkipUntilStreamSink.new = function(_otherStream) {
      this[_otherSubscription$] = null;
      this[_canAdd] = false;
      this[_otherStream$0] = _otherStream;
      ;
    }).prototype = _SkipUntilStreamSink.prototype;
    dart.addTypeTests(_SkipUntilStreamSink);
    _SkipUntilStreamSink.prototype[_is__SkipUntilStreamSink_default] = true;
    dart.addTypeCaches(_SkipUntilStreamSink);
    _SkipUntilStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(S, S)];
    dart.setMethodSignature(_SkipUntilStreamSink, () => ({
      __proto__: dart.getMethods(_SkipUntilStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [dart.nullable(core.Object), core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_SkipUntilStreamSink, I[7]);
    dart.setFieldSignature(_SkipUntilStreamSink, () => ({
      __proto__: dart.getFields(_SkipUntilStreamSink.__proto__),
      [_otherStream$0]: dart.finalFieldType(async.Stream$(T)),
      [_otherSubscription$]: dart.fieldType(dart.nullable(async.StreamSubscription$(T))),
      [_canAdd]: dart.fieldType(core.bool)
    }));
    return _SkipUntilStreamSink;
  });
  skip_until._SkipUntilStreamSink = skip_until._SkipUntilStreamSink$();
  dart.addTypeTests(skip_until._SkipUntilStreamSink, _is__SkipUntilStreamSink_default);
  var otherStream$0 = dart.privateName(skip_until, "SkipUntilStreamTransformer.otherStream");
  const _is_SkipUntilStreamTransformer_default = Symbol('_is_SkipUntilStreamTransformer_default');
  skip_until.SkipUntilStreamTransformer$ = dart.generic((S, T) => {
    var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
    var _SkipUntilStreamSinkOfS$T = () => (_SkipUntilStreamSinkOfS$T = dart.constFn(skip_until._SkipUntilStreamSink$(S, T)))();
    class SkipUntilStreamTransformer extends async.StreamTransformerBase$(S, S) {
      get otherStream() {
        return this[otherStream$0];
      }
      set otherStream(value) {
        super.otherStream = value;
      }
      bind(stream) {
        StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, S, stream, new (_SkipUntilStreamSinkOfS$T()).new(this.otherStream));
      }
    }
    (SkipUntilStreamTransformer.new = function(otherStream) {
      this[otherStream$0] = otherStream;
      SkipUntilStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = SkipUntilStreamTransformer.prototype;
    dart.addTypeTests(SkipUntilStreamTransformer);
    SkipUntilStreamTransformer.prototype[_is_SkipUntilStreamTransformer_default] = true;
    dart.addTypeCaches(SkipUntilStreamTransformer);
    dart.setMethodSignature(SkipUntilStreamTransformer, () => ({
      __proto__: dart.getMethods(SkipUntilStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(S), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(SkipUntilStreamTransformer, I[7]);
    dart.setFieldSignature(SkipUntilStreamTransformer, () => ({
      __proto__: dart.getFields(SkipUntilStreamTransformer.__proto__),
      otherStream: dart.finalFieldType(async.Stream$(T))
    }));
    return SkipUntilStreamTransformer;
  });
  skip_until.SkipUntilStreamTransformer = skip_until.SkipUntilStreamTransformer$();
  dart.addTypeTests(skip_until.SkipUntilStreamTransformer, _is_SkipUntilStreamTransformer_default);
  skip_until['SkipUntilExtension|skipUntil'] = function SkipUntilExtension$124skipUntil(T, S, $this, otherStream) {
    return $this.transform(T, new (skip_until.SkipUntilStreamTransformer$(T, S)).new(otherStream));
  };
  skip_until['SkipUntilExtension|get#skipUntil'] = function SkipUntilExtension$124get$35skipUntil(T, $this) {
    return dart.fn((S, otherStream) => skip_until['SkipUntilExtension|skipUntil'](T, S, $this, otherStream), dart.gFnType(S => {
      var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
      return [async.Stream$(T), [StreamOfS()]];
    }, S => {
      var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
      return [T$.ObjectN()];
    }));
  };
  var _inRecovery = dart.privateName(on_error_resume, "_inRecovery");
  var _recoverySubscriptions = dart.privateName(on_error_resume, "_recoverySubscriptions");
  var _recoveryFn$ = dart.privateName(on_error_resume, "_recoveryFn");
  const _is__OnErrorResumeStreamSink_default = Symbol('_is__OnErrorResumeStreamSink_default');
  on_error_resume._OnErrorResumeStreamSink$ = dart.generic(S => {
    var StreamSubscriptionOfS = () => (StreamSubscriptionOfS = dart.constFn(async.StreamSubscription$(S)))();
    var JSArrayOfStreamSubscriptionOfS = () => (JSArrayOfStreamSubscriptionOfS = dart.constFn(_interceptors.JSArray$(StreamSubscriptionOfS())))();
    var EventSinkOfS = () => (EventSinkOfS = dart.constFn(async.EventSink$(S)))();
    var VoidToStreamSubscriptionOfS = () => (VoidToStreamSubscriptionOfS = dart.constFn(dart.fnType(StreamSubscriptionOfS(), [])))();
    var StreamSubscriptionOfSTodynamic = () => (StreamSubscriptionOfSTodynamic = dart.constFn(dart.fnType(dart.dynamic, [StreamSubscriptionOfS()])))();
    var StreamSubscriptionOfSToFutureOfvoid = () => (StreamSubscriptionOfSToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [StreamSubscriptionOfS()])))();
    var StreamSubscriptionOfSTovoid = () => (StreamSubscriptionOfSTovoid = dart.constFn(dart.fnType(dart.void, [StreamSubscriptionOfS()])))();
    class _OnErrorResumeStreamSink extends core.Object {
      add(sink, data) {
        EventSinkOfS().as(sink);
        S.as(data);
        if (!this[_inRecovery]) {
          sink.add(data);
        }
      }
      addError(sink, e, st = null) {
        let t37;
        EventSinkOfS().as(sink);
        this[_inRecovery] = true;
        let recoveryStream = (t37 = e, this[_recoveryFn$](t37));
        let subscription = null;
        function subscription$35get() {
          let t38;
          t38 = subscription;
          return t38 == null ? dart.throw(new _internal.LateError.localNI("subscription")) : t38;
        }
        dart.fn(subscription$35get, VoidToStreamSubscriptionOfS());
        function subscription$35set(t39) {
          return subscription = t39;
        }
        dart.fn(subscription$35set, StreamSubscriptionOfSTodynamic());
        subscription$35set(recoveryStream.listen(dart.bind(sink, 'add'), {onError: dart.bind(sink, 'addError'), onDone: dart.fn(() => {
            this[_recoverySubscriptions][$remove](subscription$35get());
            sink.close();
          }, T$.VoidTovoid())}));
        this[_recoverySubscriptions][$add](subscription$35get());
      }
      close(sink) {
        EventSinkOfS().as(sink);
        if (!this[_inRecovery]) {
          sink.close();
        }
      }
      onCancel(sink) {
        EventSinkOfS().as(sink);
        return this[_recoverySubscriptions][$isEmpty] ? null : async.Future.wait(dart.void, this[_recoverySubscriptions][$map](T$.FutureOfvoid(), dart.fn(subscription => subscription.cancel(), StreamSubscriptionOfSToFutureOfvoid())));
      }
      onListen(sink) {
        EventSinkOfS().as(sink);
      }
      onPause(sink) {
        EventSinkOfS().as(sink);
        return this[_recoverySubscriptions][$forEach](dart.fn(subscription => subscription.pause(), StreamSubscriptionOfSTovoid()));
      }
      onResume(sink) {
        EventSinkOfS().as(sink);
        return this[_recoverySubscriptions][$forEach](dart.fn(subscription => subscription.resume(), StreamSubscriptionOfSTovoid()));
      }
    }
    (_OnErrorResumeStreamSink.new = function(_recoveryFn) {
      this[_inRecovery] = false;
      this[_recoverySubscriptions] = JSArrayOfStreamSubscriptionOfS().of([]);
      this[_recoveryFn$] = _recoveryFn;
      ;
    }).prototype = _OnErrorResumeStreamSink.prototype;
    dart.addTypeTests(_OnErrorResumeStreamSink);
    _OnErrorResumeStreamSink.prototype[_is__OnErrorResumeStreamSink_default] = true;
    dart.addTypeCaches(_OnErrorResumeStreamSink);
    _OnErrorResumeStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(S, S)];
    dart.setMethodSignature(_OnErrorResumeStreamSink, () => ({
      __proto__: dart.getMethods(_OnErrorResumeStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [dart.nullable(core.Object), core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_OnErrorResumeStreamSink, I[8]);
    dart.setFieldSignature(_OnErrorResumeStreamSink, () => ({
      __proto__: dart.getFields(_OnErrorResumeStreamSink.__proto__),
      [_recoveryFn$]: dart.finalFieldType(dart.fnType(async.Stream$(S), [core.Object])),
      [_inRecovery]: dart.fieldType(core.bool),
      [_recoverySubscriptions]: dart.finalFieldType(core.List$(async.StreamSubscription$(S)))
    }));
    return _OnErrorResumeStreamSink;
  });
  on_error_resume._OnErrorResumeStreamSink = on_error_resume._OnErrorResumeStreamSink$();
  dart.addTypeTests(on_error_resume._OnErrorResumeStreamSink, _is__OnErrorResumeStreamSink_default);
  var recoveryFn$ = dart.privateName(on_error_resume, "OnErrorResumeStreamTransformer.recoveryFn");
  const _is_OnErrorResumeStreamTransformer_default = Symbol('_is_OnErrorResumeStreamTransformer_default');
  on_error_resume.OnErrorResumeStreamTransformer$ = dart.generic(S => {
    var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
    var _OnErrorResumeStreamSinkOfS = () => (_OnErrorResumeStreamSinkOfS = dart.constFn(on_error_resume._OnErrorResumeStreamSink$(S)))();
    class OnErrorResumeStreamTransformer extends async.StreamTransformerBase$(S, S) {
      get recoveryFn() {
        return this[recoveryFn$];
      }
      set recoveryFn(value) {
        super.recoveryFn = value;
      }
      bind(stream) {
        StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, S, stream, new (_OnErrorResumeStreamSinkOfS()).new(this.recoveryFn));
      }
    }
    (OnErrorResumeStreamTransformer.new = function(recoveryFn) {
      this[recoveryFn$] = recoveryFn;
      OnErrorResumeStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = OnErrorResumeStreamTransformer.prototype;
    dart.addTypeTests(OnErrorResumeStreamTransformer);
    OnErrorResumeStreamTransformer.prototype[_is_OnErrorResumeStreamTransformer_default] = true;
    dart.addTypeCaches(OnErrorResumeStreamTransformer);
    dart.setMethodSignature(OnErrorResumeStreamTransformer, () => ({
      __proto__: dart.getMethods(OnErrorResumeStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(S), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(OnErrorResumeStreamTransformer, I[8]);
    dart.setFieldSignature(OnErrorResumeStreamTransformer, () => ({
      __proto__: dart.getFields(OnErrorResumeStreamTransformer.__proto__),
      recoveryFn: dart.finalFieldType(dart.fnType(async.Stream$(S), [core.Object]))
    }));
    return OnErrorResumeStreamTransformer;
  });
  on_error_resume.OnErrorResumeStreamTransformer = on_error_resume.OnErrorResumeStreamTransformer$();
  dart.addTypeTests(on_error_resume.OnErrorResumeStreamTransformer, _is_OnErrorResumeStreamTransformer_default);
  on_error_resume['OnErrorExtensions|onErrorResumeNext'] = function OnErrorExtensions$124onErrorResumeNext(T, $this, recoveryStream) {
    return $this.transform(T, new (on_error_resume.OnErrorResumeStreamTransformer$(T)).new(dart.fn(e => recoveryStream, dart.fnType(async.Stream$(T), [dart.dynamic]))));
  };
  on_error_resume['OnErrorExtensions|get#onErrorResumeNext'] = function OnErrorExtensions$124get$35onErrorResumeNext(T, $this) {
    return dart.fn(recoveryStream => on_error_resume['OnErrorExtensions|onErrorResumeNext'](T, $this, recoveryStream), dart.fnType(async.Stream$(T), [async.Stream$(T)]));
  };
  on_error_resume['OnErrorExtensions|onErrorResume'] = function OnErrorExtensions$124onErrorResume(T, $this, recoveryFn) {
    return $this.transform(T, new (on_error_resume.OnErrorResumeStreamTransformer$(T)).new(recoveryFn));
  };
  on_error_resume['OnErrorExtensions|get#onErrorResume'] = function OnErrorExtensions$124get$35onErrorResume(T, $this) {
    return dart.fn(recoveryFn => on_error_resume['OnErrorExtensions|onErrorResume'](T, $this, recoveryFn), dart.fnType(async.Stream$(T), [dart.fnType(async.Stream$(T), [core.Object])]));
  };
  on_error_resume['OnErrorExtensions|onErrorReturn'] = function OnErrorExtensions$124onErrorReturn(T, $this, returnValue) {
    return $this.transform(T, new (on_error_resume.OnErrorResumeStreamTransformer$(T)).new(dart.fn(e => async.Stream$(T).value(returnValue), dart.fnType(async.Stream$(T), [core.Object]))));
  };
  on_error_resume['OnErrorExtensions|get#onErrorReturn'] = function OnErrorExtensions$124get$35onErrorReturn(T, $this) {
    return dart.fn(returnValue => on_error_resume['OnErrorExtensions|onErrorReturn'](T, $this, returnValue), dart.fnType(async.Stream$(T), [T]));
  };
  on_error_resume['OnErrorExtensions|onErrorReturnWith'] = function OnErrorExtensions$124onErrorReturnWith(T, $this, returnFn) {
    return $this.transform(T, new (on_error_resume.OnErrorResumeStreamTransformer$(T)).new(dart.fn(e => async.Stream$(T).value(returnFn(e)), dart.fnType(async.Stream$(T), [core.Object]))));
  };
  on_error_resume['OnErrorExtensions|get#onErrorReturnWith'] = function OnErrorExtensions$124get$35onErrorReturnWith(T, $this) {
    return dart.fn(returnFn => on_error_resume['OnErrorExtensions|onErrorReturnWith'](T, $this, returnFn), dart.fnType(async.Stream$(T), [dart.fnType(T, [core.Object])]));
  };
  var _subscriptions$ = dart.privateName(flat_map, "_subscriptions");
  var _openSubscriptions = dart.privateName(flat_map, "_openSubscriptions");
  var _inputClosed$ = dart.privateName(flat_map, "_inputClosed");
  var _mapper$0 = dart.privateName(flat_map, "_mapper");
  const _is__FlatMapStreamSink_default = Symbol('_is__FlatMapStreamSink_default');
  flat_map._FlatMapStreamSink$ = dart.generic((S, T) => {
    var StreamSubscriptionOfT = () => (StreamSubscriptionOfT = dart.constFn(async.StreamSubscription$(T)))();
    var JSArrayOfStreamSubscriptionOfT = () => (JSArrayOfStreamSubscriptionOfT = dart.constFn(_interceptors.JSArray$(StreamSubscriptionOfT())))();
    var EventSinkOfT = () => (EventSinkOfT = dart.constFn(async.EventSink$(T)))();
    var VoidToStreamSubscriptionOfT = () => (VoidToStreamSubscriptionOfT = dart.constFn(dart.fnType(StreamSubscriptionOfT(), [])))();
    var StreamSubscriptionOfTTodynamic = () => (StreamSubscriptionOfTTodynamic = dart.constFn(dart.fnType(dart.dynamic, [StreamSubscriptionOfT()])))();
    var StreamSubscriptionOfTToFutureOfvoid = () => (StreamSubscriptionOfTToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [StreamSubscriptionOfT()])))();
    var StreamSubscriptionOfTTovoid = () => (StreamSubscriptionOfTTovoid = dart.constFn(dart.fnType(dart.void, [StreamSubscriptionOfT()])))();
    class _FlatMapStreamSink extends core.Object {
      add(sink, data) {
        let t49;
        EventSinkOfT().as(sink);
        S.as(data);
        let mappedStream = (t49 = data, this[_mapper$0](t49));
        this[_openSubscriptions] = this[_openSubscriptions] + 1;
        let subscription = null;
        function subscription$35get() {
          let t50;
          t50 = subscription;
          return t50 == null ? dart.throw(new _internal.LateError.localNI("subscription")) : t50;
        }
        dart.fn(subscription$35get, VoidToStreamSubscriptionOfT());
        function subscription$35set(t51) {
          return subscription = t51;
        }
        dart.fn(subscription$35set, StreamSubscriptionOfTTodynamic());
        subscription$35set(mappedStream.listen(dart.bind(sink, 'add'), {onError: dart.bind(sink, 'addError'), onDone: dart.fn(() => {
            this[_openSubscriptions] = this[_openSubscriptions] - 1;
            this[_subscriptions$][$remove](subscription$35get());
            if (this[_inputClosed$] && this[_openSubscriptions] === 0) {
              sink.close();
            }
          }, T$.VoidTovoid())}));
        this[_subscriptions$][$add](subscription$35get());
      }
      addError(sink, e, st = null) {
        EventSinkOfT().as(sink);
        return sink.addError(e, st);
      }
      close(sink) {
        EventSinkOfT().as(sink);
        this[_inputClosed$] = true;
        if (this[_openSubscriptions] === 0) {
          sink.close();
        }
      }
      onCancel(sink) {
        EventSinkOfT().as(sink);
        return async.Future.wait(dart.dynamic, this[_subscriptions$][$map](async.Future, dart.fn(s => s.cancel(), StreamSubscriptionOfTToFutureOfvoid())));
      }
      onListen(sink) {
        EventSinkOfT().as(sink);
      }
      onPause(sink) {
        EventSinkOfT().as(sink);
        return this[_subscriptions$][$forEach](dart.fn(s => s.pause(), StreamSubscriptionOfTTovoid()));
      }
      onResume(sink) {
        EventSinkOfT().as(sink);
        return this[_subscriptions$][$forEach](dart.fn(s => s.resume(), StreamSubscriptionOfTTovoid()));
      }
    }
    (_FlatMapStreamSink.new = function(_mapper) {
      this[_subscriptions$] = JSArrayOfStreamSubscriptionOfT().of([]);
      this[_openSubscriptions] = 0;
      this[_inputClosed$] = false;
      this[_mapper$0] = _mapper;
      ;
    }).prototype = _FlatMapStreamSink.prototype;
    dart.addTypeTests(_FlatMapStreamSink);
    _FlatMapStreamSink.prototype[_is__FlatMapStreamSink_default] = true;
    dart.addTypeCaches(_FlatMapStreamSink);
    _FlatMapStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(S, T)];
    dart.setMethodSignature(_FlatMapStreamSink, () => ({
      __proto__: dart.getMethods(_FlatMapStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [dart.nullable(core.Object), core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_FlatMapStreamSink, I[9]);
    dart.setFieldSignature(_FlatMapStreamSink, () => ({
      __proto__: dart.getFields(_FlatMapStreamSink.__proto__),
      [_mapper$0]: dart.finalFieldType(dart.fnType(async.Stream$(T), [S])),
      [_subscriptions$]: dart.finalFieldType(core.List$(async.StreamSubscription$(T))),
      [_openSubscriptions]: dart.fieldType(core.int),
      [_inputClosed$]: dart.fieldType(core.bool)
    }));
    return _FlatMapStreamSink;
  });
  flat_map._FlatMapStreamSink = flat_map._FlatMapStreamSink$();
  dart.addTypeTests(flat_map._FlatMapStreamSink, _is__FlatMapStreamSink_default);
  var mapper$0 = dart.privateName(flat_map, "FlatMapStreamTransformer.mapper");
  const _is_FlatMapStreamTransformer_default = Symbol('_is_FlatMapStreamTransformer_default');
  flat_map.FlatMapStreamTransformer$ = dart.generic((S, T) => {
    var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
    var _FlatMapStreamSinkOfS$T = () => (_FlatMapStreamSinkOfS$T = dart.constFn(flat_map._FlatMapStreamSink$(S, T)))();
    class FlatMapStreamTransformer extends async.StreamTransformerBase$(S, T) {
      get mapper() {
        return this[mapper$0];
      }
      set mapper(value) {
        super.mapper = value;
      }
      bind(stream) {
        StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, T, stream, new (_FlatMapStreamSinkOfS$T()).new(this.mapper));
      }
    }
    (FlatMapStreamTransformer.new = function(mapper) {
      this[mapper$0] = mapper;
      FlatMapStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = FlatMapStreamTransformer.prototype;
    dart.addTypeTests(FlatMapStreamTransformer);
    FlatMapStreamTransformer.prototype[_is_FlatMapStreamTransformer_default] = true;
    dart.addTypeCaches(FlatMapStreamTransformer);
    dart.setMethodSignature(FlatMapStreamTransformer, () => ({
      __proto__: dart.getMethods(FlatMapStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(FlatMapStreamTransformer, I[9]);
    dart.setFieldSignature(FlatMapStreamTransformer, () => ({
      __proto__: dart.getFields(FlatMapStreamTransformer.__proto__),
      mapper: dart.finalFieldType(dart.fnType(async.Stream$(T), [S]))
    }));
    return FlatMapStreamTransformer;
  });
  flat_map.FlatMapStreamTransformer = flat_map.FlatMapStreamTransformer$();
  dart.addTypeTests(flat_map.FlatMapStreamTransformer, _is_FlatMapStreamTransformer_default);
  flat_map['FlatMapExtension|flatMap'] = function FlatMapExtension$124flatMap(T, S, $this, mapper) {
    return $this.transform(S, new (flat_map.FlatMapStreamTransformer$(T, S)).new(mapper));
  };
  flat_map['FlatMapExtension|get#flatMap'] = function FlatMapExtension$124get$35flatMap(T, $this) {
    return dart.fn((S, mapper) => flat_map['FlatMapExtension|flatMap'](T, S, $this, mapper), dart.gFnType(S => {
      var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
      return [StreamOfS(), [dart.fnType(StreamOfS(), [T])]];
    }, S => {
      var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
      return [T$.ObjectN()];
    }));
  };
  flat_map['FlatMapExtension|flatMapIterable'] = function FlatMapExtension$124flatMapIterable(T, S, $this, mapper) {
    return $this.transform(core.Iterable$(S), new (flat_map.FlatMapStreamTransformer$(T, core.Iterable$(S))).new(mapper)).expand(S, dart.fn(iterable => iterable, dart.fnType(core.Iterable$(S), [core.Iterable$(S)])));
  };
  flat_map['FlatMapExtension|get#flatMapIterable'] = function FlatMapExtension$124get$35flatMapIterable(T, $this) {
    return dart.fn((S, mapper) => flat_map['FlatMapExtension|flatMapIterable'](T, S, $this, mapper), dart.gFnType(S => {
      var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
      var IterableOfS = () => (IterableOfS = dart.constFn(core.Iterable$(S)))();
      var StreamOfIterableOfS = () => (StreamOfIterableOfS = dart.constFn(async.Stream$(IterableOfS())))();
      return [StreamOfS(), [dart.fnType(StreamOfIterableOfS(), [T])]];
    }, S => {
      var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
      var IterableOfS = () => (IterableOfS = dart.constFn(core.Iterable$(S)))();
      var StreamOfIterableOfS = () => (StreamOfIterableOfS = dart.constFn(async.Stream$(IterableOfS())))();
      return [T$.ObjectN()];
    }));
  };
  var _mapperSubscription$ = dart.privateName(exhaust_map, "_mapperSubscription");
  var _inputClosed$0 = dart.privateName(exhaust_map, "_inputClosed");
  var _mapper$1 = dart.privateName(exhaust_map, "_mapper");
  const _is__ExhaustMapStreamSink_default = Symbol('_is__ExhaustMapStreamSink_default');
  exhaust_map._ExhaustMapStreamSink$ = dart.generic((S, T) => {
    var EventSinkOfT = () => (EventSinkOfT = dart.constFn(async.EventSink$(T)))();
    class _ExhaustMapStreamSink extends core.Object {
      add(sink, data) {
        let t57;
        EventSinkOfT().as(sink);
        S.as(data);
        if (this[_mapperSubscription$] != null) {
          return;
        }
        let mappedStream = (t57 = data, this[_mapper$1](t57));
        this[_mapperSubscription$] = mappedStream.listen(dart.bind(sink, 'add'), {onError: dart.bind(sink, 'addError'), onDone: dart.fn(() => {
            this[_mapperSubscription$] = null;
            if (this[_inputClosed$0]) {
              sink.close();
            }
          }, T$.VoidTovoid())});
      }
      addError(sink, e, st = null) {
        EventSinkOfT().as(sink);
        return sink.addError(e, st);
      }
      close(sink) {
        let t57;
        EventSinkOfT().as(sink);
        this[_inputClosed$0] = true;
        t57 = this[_mapperSubscription$];
        t57 == null ? sink.close() : t57;
      }
      onCancel(sink) {
        let t57;
        EventSinkOfT().as(sink);
        t57 = this[_mapperSubscription$];
        return t57 == null ? null : t57.cancel();
      }
      onListen(sink) {
        EventSinkOfT().as(sink);
      }
      onPause(sink) {
        let t57;
        EventSinkOfT().as(sink);
        t57 = this[_mapperSubscription$];
        return t57 == null ? null : t57.pause();
      }
      onResume(sink) {
        let t57;
        EventSinkOfT().as(sink);
        t57 = this[_mapperSubscription$];
        return t57 == null ? null : t57.resume();
      }
    }
    (_ExhaustMapStreamSink.new = function(_mapper) {
      this[_mapperSubscription$] = null;
      this[_inputClosed$0] = false;
      this[_mapper$1] = _mapper;
      ;
    }).prototype = _ExhaustMapStreamSink.prototype;
    dart.addTypeTests(_ExhaustMapStreamSink);
    _ExhaustMapStreamSink.prototype[_is__ExhaustMapStreamSink_default] = true;
    dart.addTypeCaches(_ExhaustMapStreamSink);
    _ExhaustMapStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(S, T)];
    dart.setMethodSignature(_ExhaustMapStreamSink, () => ({
      __proto__: dart.getMethods(_ExhaustMapStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [dart.nullable(core.Object), core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_ExhaustMapStreamSink, I[10]);
    dart.setFieldSignature(_ExhaustMapStreamSink, () => ({
      __proto__: dart.getFields(_ExhaustMapStreamSink.__proto__),
      [_mapper$1]: dart.finalFieldType(dart.fnType(async.Stream$(T), [S])),
      [_mapperSubscription$]: dart.fieldType(dart.nullable(async.StreamSubscription$(T))),
      [_inputClosed$0]: dart.fieldType(core.bool)
    }));
    return _ExhaustMapStreamSink;
  });
  exhaust_map._ExhaustMapStreamSink = exhaust_map._ExhaustMapStreamSink$();
  dart.addTypeTests(exhaust_map._ExhaustMapStreamSink, _is__ExhaustMapStreamSink_default);
  var mapper$1 = dart.privateName(exhaust_map, "ExhaustMapStreamTransformer.mapper");
  const _is_ExhaustMapStreamTransformer_default = Symbol('_is_ExhaustMapStreamTransformer_default');
  exhaust_map.ExhaustMapStreamTransformer$ = dart.generic((S, T) => {
    var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
    var _ExhaustMapStreamSinkOfS$T = () => (_ExhaustMapStreamSinkOfS$T = dart.constFn(exhaust_map._ExhaustMapStreamSink$(S, T)))();
    class ExhaustMapStreamTransformer extends async.StreamTransformerBase$(S, T) {
      get mapper() {
        return this[mapper$1];
      }
      set mapper(value) {
        super.mapper = value;
      }
      bind(stream) {
        StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, T, stream, new (_ExhaustMapStreamSinkOfS$T()).new(this.mapper));
      }
    }
    (ExhaustMapStreamTransformer.new = function(mapper) {
      this[mapper$1] = mapper;
      ExhaustMapStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = ExhaustMapStreamTransformer.prototype;
    dart.addTypeTests(ExhaustMapStreamTransformer);
    ExhaustMapStreamTransformer.prototype[_is_ExhaustMapStreamTransformer_default] = true;
    dart.addTypeCaches(ExhaustMapStreamTransformer);
    dart.setMethodSignature(ExhaustMapStreamTransformer, () => ({
      __proto__: dart.getMethods(ExhaustMapStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(ExhaustMapStreamTransformer, I[10]);
    dart.setFieldSignature(ExhaustMapStreamTransformer, () => ({
      __proto__: dart.getFields(ExhaustMapStreamTransformer.__proto__),
      mapper: dart.finalFieldType(dart.fnType(async.Stream$(T), [S]))
    }));
    return ExhaustMapStreamTransformer;
  });
  exhaust_map.ExhaustMapStreamTransformer = exhaust_map.ExhaustMapStreamTransformer$();
  dart.addTypeTests(exhaust_map.ExhaustMapStreamTransformer, _is_ExhaustMapStreamTransformer_default);
  exhaust_map['ExhaustMapExtension|exhaustMap'] = function ExhaustMapExtension$124exhaustMap(T, S, $this, mapper) {
    return $this.transform(S, new (exhaust_map.ExhaustMapStreamTransformer$(T, S)).new(mapper));
  };
  exhaust_map['ExhaustMapExtension|get#exhaustMap'] = function ExhaustMapExtension$124get$35exhaustMap(T, $this) {
    return dart.fn((S, mapper) => exhaust_map['ExhaustMapExtension|exhaustMap'](T, S, $this, mapper), dart.gFnType(S => {
      var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
      return [StreamOfS(), [dart.fnType(StreamOfS(), [T])]];
    }, S => {
      var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
      return [T$.ObjectN()];
    }));
  };
  var _onCancel$ = dart.privateName($do, "_onCancel");
  var _onData$ = dart.privateName($do, "_onData");
  var _onDone$ = dart.privateName($do, "_onDone");
  var _onEach$ = dart.privateName($do, "_onEach");
  var _onError$ = dart.privateName($do, "_onError");
  var _onListen$ = dart.privateName($do, "_onListen");
  var _onPause$ = dart.privateName($do, "_onPause");
  var _onResume$ = dart.privateName($do, "_onResume");
  const _is__DoStreamSink_default = Symbol('_is__DoStreamSink_default');
  $do._DoStreamSink$ = dart.generic(S => {
    var EventSinkOfS = () => (EventSinkOfS = dart.constFn(async.EventSink$(S)))();
    var NotificationOfS = () => (NotificationOfS = dart.constFn(notification.Notification$(S)))();
    class _DoStreamSink extends core.Object {
      add(sink, data) {
        let t59, t60;
        EventSinkOfS().as(sink);
        S.as(data);
        try {
          t59 = this[_onData$];
          t59 == null ? null : t59(data);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            sink.addError(e, s);
          } else
            throw e$;
        }
        try {
          t60 = this[_onEach$];
          t60 == null ? null : t60(NotificationOfS().onData(data));
        } catch (e$0) {
          let e = dart.getThrown(e$0);
          let s = dart.stackTrace(e$0);
          if (core.Object.is(e)) {
            sink.addError(e, s);
          } else
            throw e$0;
        }
        sink.add(data);
      }
      addError(sink, e, st = null) {
        let t61, t62;
        EventSinkOfS().as(sink);
        try {
          t61 = this[_onError$];
          t61 == null ? null : t61(e, st);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            sink.addError(e, s);
          } else
            throw e$;
        }
        try {
          t62 = this[_onEach$];
          t62 == null ? null : t62(NotificationOfS().onError(e, st));
        } catch (e$0) {
          let e = dart.getThrown(e$0);
          let s = dart.stackTrace(e$0);
          if (core.Object.is(e)) {
            sink.addError(e, s);
          } else
            throw e$0;
        }
        sink.addError(e, st);
      }
      close(sink) {
        let t63, t64;
        EventSinkOfS().as(sink);
        try {
          t63 = this[_onDone$];
          t63 == null ? null : t63();
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            sink.addError(e, s);
          } else
            throw e$;
        }
        try {
          t64 = this[_onEach$];
          t64 == null ? null : t64(NotificationOfS().onDone());
        } catch (e$0) {
          let e = dart.getThrown(e$0);
          let s = dart.stackTrace(e$0);
          if (core.Object.is(e)) {
            sink.addError(e, s);
          } else
            throw e$0;
        }
        sink.close();
      }
      onCancel(sink) {
        let t65;
        EventSinkOfS().as(sink);
        t65 = this[_onCancel$];
        return t65 == null ? null : t65();
      }
      onListen(sink) {
        let t65;
        EventSinkOfS().as(sink);
        t65 = this[_onListen$];
        t65 == null ? null : t65();
      }
      onPause(sink) {
        let t65;
        EventSinkOfS().as(sink);
        t65 = this[_onPause$];
        return t65 == null ? null : t65();
      }
      onResume(sink) {
        let t65;
        EventSinkOfS().as(sink);
        t65 = this[_onResume$];
        return t65 == null ? null : t65();
      }
    }
    (_DoStreamSink.new = function(_onCancel, _onData, _onDone, _onEach, _onError, _onListen, _onPause, _onResume) {
      this[_onCancel$] = _onCancel;
      this[_onData$] = _onData;
      this[_onDone$] = _onDone;
      this[_onEach$] = _onEach;
      this[_onError$] = _onError;
      this[_onListen$] = _onListen;
      this[_onPause$] = _onPause;
      this[_onResume$] = _onResume;
      ;
    }).prototype = _DoStreamSink.prototype;
    dart.addTypeTests(_DoStreamSink);
    _DoStreamSink.prototype[_is__DoStreamSink_default] = true;
    dart.addTypeCaches(_DoStreamSink);
    _DoStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(S, S)];
    dart.setMethodSignature(_DoStreamSink, () => ({
      __proto__: dart.getMethods(_DoStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [dart.nullable(core.Object), core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_DoStreamSink, I[11]);
    dart.setFieldSignature(_DoStreamSink, () => ({
      __proto__: dart.getFields(_DoStreamSink.__proto__),
      [_onCancel$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
      [_onData$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [S]))),
      [_onDone$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
      [_onEach$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [notification.Notification$(S)]))),
      [_onError$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.Object, dart.nullable(core.StackTrace)]))),
      [_onListen$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
      [_onPause$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
      [_onResume$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [])))
    }));
    return _DoStreamSink;
  });
  $do._DoStreamSink = $do._DoStreamSink$();
  dart.addTypeTests($do._DoStreamSink, _is__DoStreamSink_default);
  var onCancel$ = dart.privateName($do, "DoStreamTransformer.onCancel");
  var onData$ = dart.privateName($do, "DoStreamTransformer.onData");
  var onDone$ = dart.privateName($do, "DoStreamTransformer.onDone");
  var onEach$ = dart.privateName($do, "DoStreamTransformer.onEach");
  var onError$ = dart.privateName($do, "DoStreamTransformer.onError");
  var onListen$ = dart.privateName($do, "DoStreamTransformer.onListen");
  var onPause$ = dart.privateName($do, "DoStreamTransformer.onPause");
  var onResume$ = dart.privateName($do, "DoStreamTransformer.onResume");
  const _is_DoStreamTransformer_default = Symbol('_is_DoStreamTransformer_default');
  $do.DoStreamTransformer$ = dart.generic(S => {
    var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
    var _DoStreamSinkOfS = () => (_DoStreamSinkOfS = dart.constFn($do._DoStreamSink$(S)))();
    class DoStreamTransformer extends async.StreamTransformerBase$(S, S) {
      get onCancel() {
        return this[onCancel$];
      }
      set onCancel(value) {
        super.onCancel = value;
      }
      get onData() {
        return this[onData$];
      }
      set onData(value) {
        super.onData = value;
      }
      get onDone() {
        return this[onDone$];
      }
      set onDone(value) {
        super.onDone = value;
      }
      get onEach() {
        return this[onEach$];
      }
      set onEach(value) {
        super.onEach = value;
      }
      get onError() {
        return this[onError$];
      }
      set onError(value) {
        super.onError = value;
      }
      get onListen() {
        return this[onListen$];
      }
      set onListen(value) {
        super.onListen = value;
      }
      get onPause() {
        return this[onPause$];
      }
      set onPause(value) {
        super.onPause = value;
      }
      get onResume() {
        return this[onResume$];
      }
      set onResume(value) {
        super.onResume = value;
      }
      bind(stream) {
        StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, S, stream, new (_DoStreamSinkOfS()).new(this.onCancel, this.onData, this.onDone, this.onEach, this.onError, this.onListen, this.onPause, this.onResume));
      }
    }
    (DoStreamTransformer.new = function(opts) {
      let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
      let onData = opts && 'onData' in opts ? opts.onData : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let onEach = opts && 'onEach' in opts ? opts.onEach : null;
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onListen = opts && 'onListen' in opts ? opts.onListen : null;
      let onPause = opts && 'onPause' in opts ? opts.onPause : null;
      let onResume = opts && 'onResume' in opts ? opts.onResume : null;
      this[onCancel$] = onCancel;
      this[onData$] = onData;
      this[onDone$] = onDone;
      this[onEach$] = onEach;
      this[onError$] = onError;
      this[onListen$] = onListen;
      this[onPause$] = onPause;
      this[onResume$] = onResume;
      DoStreamTransformer.__proto__.new.call(this);
      if (this.onCancel == null && this.onData == null && this.onDone == null && this.onEach == null && this.onError == null && this.onListen == null && this.onPause == null && this.onResume == null) {
        dart.throw(new core.ArgumentError.new("Must provide at least one handler"));
      }
    }).prototype = DoStreamTransformer.prototype;
    dart.addTypeTests(DoStreamTransformer);
    DoStreamTransformer.prototype[_is_DoStreamTransformer_default] = true;
    dart.addTypeCaches(DoStreamTransformer);
    dart.setMethodSignature(DoStreamTransformer, () => ({
      __proto__: dart.getMethods(DoStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(S), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(DoStreamTransformer, I[11]);
    dart.setFieldSignature(DoStreamTransformer, () => ({
      __proto__: dart.getFields(DoStreamTransformer.__proto__),
      onCancel: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
      onData: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [S]))),
      onDone: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
      onEach: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [notification.Notification$(S)]))),
      onError: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.Object, dart.nullable(core.StackTrace)]))),
      onListen: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
      onPause: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
      onResume: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [])))
    }));
    return DoStreamTransformer;
  });
  $do.DoStreamTransformer = $do.DoStreamTransformer$();
  dart.addTypeTests($do.DoStreamTransformer, _is_DoStreamTransformer_default);
  $do['DoExtensions|doOnCancel'] = function DoExtensions$124doOnCancel(T, $this, onCancel) {
    return $this.transform(T, new ($do.DoStreamTransformer$(T)).new({onCancel: onCancel}));
  };
  $do['DoExtensions|get#doOnCancel'] = function DoExtensions$124get$35doOnCancel(T, $this) {
    return dart.fn(onCancel => $do['DoExtensions|doOnCancel'](T, $this, onCancel), dart.fnType(async.Stream$(T), [T$.VoidToFutureOrOfvoid()]));
  };
  $do['DoExtensions|doOnData'] = function DoExtensions$124doOnData(T, $this, onData) {
    return $this.transform(T, new ($do.DoStreamTransformer$(T)).new({onData: onData}));
  };
  $do['DoExtensions|get#doOnData'] = function DoExtensions$124get$35doOnData(T, $this) {
    return dart.fn(onData => $do['DoExtensions|doOnData'](T, $this, onData), dart.fnType(async.Stream$(T), [dart.fnType(dart.void, [T])]));
  };
  $do['DoExtensions|doOnDone'] = function DoExtensions$124doOnDone(T, $this, onDone) {
    return $this.transform(T, new ($do.DoStreamTransformer$(T)).new({onDone: onDone}));
  };
  $do['DoExtensions|get#doOnDone'] = function DoExtensions$124get$35doOnDone(T, $this) {
    return dart.fn(onDone => $do['DoExtensions|doOnDone'](T, $this, onDone), dart.fnType(async.Stream$(T), [T$.VoidTovoid()]));
  };
  $do['DoExtensions|doOnEach'] = function DoExtensions$124doOnEach(T, $this, onEach) {
    return $this.transform(T, new ($do.DoStreamTransformer$(T)).new({onEach: onEach}));
  };
  $do['DoExtensions|get#doOnEach'] = function DoExtensions$124get$35doOnEach(T, $this) {
    return dart.fn(onEach => $do['DoExtensions|doOnEach'](T, $this, onEach), dart.fnType(async.Stream$(T), [dart.fnType(dart.void, [notification.Notification$(T)])]));
  };
  $do['DoExtensions|doOnError'] = function DoExtensions$124doOnError(T, $this, onError) {
    return $this.transform(T, new ($do.DoStreamTransformer$(T)).new({onError: onError}));
  };
  $do['DoExtensions|get#doOnError'] = function DoExtensions$124get$35doOnError(T, $this) {
    return dart.fn(onError => $do['DoExtensions|doOnError'](T, $this, onError), dart.fnType(async.Stream$(T), [T$.ObjectAndStackTraceNTovoid()]));
  };
  $do['DoExtensions|doOnListen'] = function DoExtensions$124doOnListen(T, $this, onListen) {
    return $this.transform(T, new ($do.DoStreamTransformer$(T)).new({onListen: onListen}));
  };
  $do['DoExtensions|get#doOnListen'] = function DoExtensions$124get$35doOnListen(T, $this) {
    return dart.fn(onListen => $do['DoExtensions|doOnListen'](T, $this, onListen), dart.fnType(async.Stream$(T), [T$.VoidTovoid()]));
  };
  $do['DoExtensions|doOnPause'] = function DoExtensions$124doOnPause(T, $this, onPause) {
    return $this.transform(T, new ($do.DoStreamTransformer$(T)).new({onPause: onPause}));
  };
  $do['DoExtensions|get#doOnPause'] = function DoExtensions$124get$35doOnPause(T, $this) {
    return dart.fn(onPause => $do['DoExtensions|doOnPause'](T, $this, onPause), dart.fnType(async.Stream$(T), [T$.VoidTovoid()]));
  };
  $do['DoExtensions|doOnResume'] = function DoExtensions$124doOnResume(T, $this, onResume) {
    return $this.transform(T, new ($do.DoStreamTransformer$(T)).new({onResume: onResume}));
  };
  $do['DoExtensions|get#doOnResume'] = function DoExtensions$124get$35doOnResume(T, $this) {
    return dart.fn(onResume => $do['DoExtensions|doOnResume'](T, $this, onResume), dart.fnType(async.Stream$(T), [T$.VoidTovoid()]));
  };
  var strategy$ = dart.privateName(backpressure, "BackpressureStreamTransformer.strategy");
  var windowStreamFactory$ = dart.privateName(backpressure, "BackpressureStreamTransformer.windowStreamFactory");
  var onWindowStart$ = dart.privateName(backpressure, "BackpressureStreamTransformer.onWindowStart");
  var onWindowEnd$ = dart.privateName(backpressure, "BackpressureStreamTransformer.onWindowEnd");
  var maxLengthQueue$ = dart.privateName(backpressure, "BackpressureStreamTransformer.maxLengthQueue");
  var startBufferEvery$ = dart.privateName(backpressure, "BackpressureStreamTransformer.startBufferEvery");
  var closeWindowWhen$ = dart.privateName(backpressure, "BackpressureStreamTransformer.closeWindowWhen");
  var ignoreEmptyWindows$ = dart.privateName(backpressure, "BackpressureStreamTransformer.ignoreEmptyWindows");
  var dispatchOnClose$ = dart.privateName(backpressure, "BackpressureStreamTransformer.dispatchOnClose");
  const _is_BackpressureStreamTransformer_default = Symbol('_is_BackpressureStreamTransformer_default');
  backpressure.BackpressureStreamTransformer$ = dart.generic((S, T) => {
    var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
    var _BackpressureStreamSinkOfS$T = () => (_BackpressureStreamSinkOfS$T = dart.constFn(backpressure._BackpressureStreamSink$(S, T)))();
    class BackpressureStreamTransformer extends async.StreamTransformerBase$(S, T) {
      get strategy() {
        return this[strategy$];
      }
      set strategy(value) {
        super.strategy = value;
      }
      get windowStreamFactory() {
        return this[windowStreamFactory$];
      }
      set windowStreamFactory(value) {
        super.windowStreamFactory = value;
      }
      get onWindowStart() {
        return this[onWindowStart$];
      }
      set onWindowStart(value) {
        super.onWindowStart = value;
      }
      get onWindowEnd() {
        return this[onWindowEnd$];
      }
      set onWindowEnd(value) {
        super.onWindowEnd = value;
      }
      get maxLengthQueue() {
        return this[maxLengthQueue$];
      }
      set maxLengthQueue(value) {
        super.maxLengthQueue = value;
      }
      get startBufferEvery() {
        return this[startBufferEvery$];
      }
      set startBufferEvery(value) {
        super.startBufferEvery = value;
      }
      get closeWindowWhen() {
        return this[closeWindowWhen$];
      }
      set closeWindowWhen(value) {
        super.closeWindowWhen = value;
      }
      get ignoreEmptyWindows() {
        return this[ignoreEmptyWindows$];
      }
      set ignoreEmptyWindows(value) {
        super.ignoreEmptyWindows = value;
      }
      get dispatchOnClose() {
        return this[dispatchOnClose$];
      }
      set dispatchOnClose(value) {
        super.dispatchOnClose = value;
      }
      bind(stream) {
        StreamOfS().as(stream);
        let sink = new (_BackpressureStreamSinkOfS$T()).new(this.strategy, this.windowStreamFactory, this.onWindowStart, this.onWindowEnd, this.startBufferEvery, this.closeWindowWhen, this.ignoreEmptyWindows, this.dispatchOnClose, this.maxLengthQueue);
        return forwarding_stream.forwardStream(S, T, stream, sink);
      }
    }
    (BackpressureStreamTransformer.new = function(strategy, windowStreamFactory, opts) {
      let onWindowStart = opts && 'onWindowStart' in opts ? opts.onWindowStart : null;
      let onWindowEnd = opts && 'onWindowEnd' in opts ? opts.onWindowEnd : null;
      let startBufferEvery = opts && 'startBufferEvery' in opts ? opts.startBufferEvery : 0;
      let closeWindowWhen = opts && 'closeWindowWhen' in opts ? opts.closeWindowWhen : null;
      let ignoreEmptyWindows = opts && 'ignoreEmptyWindows' in opts ? opts.ignoreEmptyWindows : true;
      let dispatchOnClose = opts && 'dispatchOnClose' in opts ? opts.dispatchOnClose : true;
      let maxLengthQueue = opts && 'maxLengthQueue' in opts ? opts.maxLengthQueue : null;
      this[strategy$] = strategy;
      this[windowStreamFactory$] = windowStreamFactory;
      this[onWindowStart$] = onWindowStart;
      this[onWindowEnd$] = onWindowEnd;
      this[startBufferEvery$] = startBufferEvery;
      this[closeWindowWhen$] = closeWindowWhen;
      this[ignoreEmptyWindows$] = ignoreEmptyWindows;
      this[dispatchOnClose$] = dispatchOnClose;
      this[maxLengthQueue$] = maxLengthQueue;
      BackpressureStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = BackpressureStreamTransformer.prototype;
    dart.addTypeTests(BackpressureStreamTransformer);
    BackpressureStreamTransformer.prototype[_is_BackpressureStreamTransformer_default] = true;
    dart.addTypeCaches(BackpressureStreamTransformer);
    dart.setMethodSignature(BackpressureStreamTransformer, () => ({
      __proto__: dart.getMethods(BackpressureStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(BackpressureStreamTransformer, I[12]);
    dart.setFieldSignature(BackpressureStreamTransformer, () => ({
      __proto__: dart.getFields(BackpressureStreamTransformer.__proto__),
      strategy: dart.finalFieldType(backpressure.WindowStrategy),
      windowStreamFactory: dart.finalFieldType(dart.nullable(dart.fnType(async.Stream, [S]))),
      onWindowStart: dart.finalFieldType(dart.nullable(dart.fnType(T, [S]))),
      onWindowEnd: dart.finalFieldType(dart.nullable(dart.fnType(T, [core.List$(S)]))),
      maxLengthQueue: dart.finalFieldType(dart.nullable(core.int)),
      startBufferEvery: dart.finalFieldType(core.int),
      closeWindowWhen: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [core.List$(S)]))),
      ignoreEmptyWindows: dart.finalFieldType(core.bool),
      dispatchOnClose: dart.finalFieldType(core.bool)
    }));
    return BackpressureStreamTransformer;
  });
  backpressure.BackpressureStreamTransformer = backpressure.BackpressureStreamTransformer$();
  dart.addTypeTests(backpressure.BackpressureStreamTransformer, _is_BackpressureStreamTransformer_default);
  const _is_WindowStreamTransformer_default = Symbol('_is_WindowStreamTransformer_default');
  window$.WindowStreamTransformer$ = dart.generic(T => {
    var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
    var ListOfT = () => (ListOfT = dart.constFn(core.List$(T)))();
    var ListOfTToStreamOfT = () => (ListOfTToStreamOfT = dart.constFn(dart.fnType(StreamOfT(), [ListOfT()])))();
    class WindowStreamTransformer extends backpressure.BackpressureStreamTransformer$(T, async.Stream$(T)) {}
    (WindowStreamTransformer.new = function(window) {
      WindowStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.firstEventOnly, window, {onWindowEnd: dart.fn(queue => StreamOfT().fromIterable(queue), ListOfTToStreamOfT()), ignoreEmptyWindows: false});
      ;
    }).prototype = WindowStreamTransformer.prototype;
    dart.addTypeTests(WindowStreamTransformer);
    WindowStreamTransformer.prototype[_is_WindowStreamTransformer_default] = true;
    dart.addTypeCaches(WindowStreamTransformer);
    dart.setLibraryUri(WindowStreamTransformer, I[13]);
    return WindowStreamTransformer;
  });
  window$.WindowStreamTransformer = window$.WindowStreamTransformer$();
  dart.addTypeTests(window$.WindowStreamTransformer, _is_WindowStreamTransformer_default);
  const _is_WindowCountStreamTransformer_default = Symbol('_is_WindowCountStreamTransformer_default');
  window$.WindowCountStreamTransformer$ = dart.generic(T => {
    var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
    var ListOfT = () => (ListOfT = dart.constFn(core.List$(T)))();
    var ListOfTToStreamOfT = () => (ListOfTToStreamOfT = dart.constFn(dart.fnType(StreamOfT(), [ListOfT()])))();
    var IterableOfT = () => (IterableOfT = dart.constFn(core.Iterable$(T)))();
    var IterableOfTTobool = () => (IterableOfTTobool = dart.constFn(dart.fnType(core.bool, [IterableOfT()])))();
    class WindowCountStreamTransformer extends backpressure.BackpressureStreamTransformer$(T, async.Stream$(T)) {}
    (WindowCountStreamTransformer.new = function(count, startBufferEvery = 0) {
      WindowCountStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.onHandler, null, {onWindowEnd: dart.fn(queue => StreamOfT().fromIterable(queue), ListOfTToStreamOfT()), startBufferEvery: startBufferEvery, closeWindowWhen: dart.fn(queue => queue[$length] === count, IterableOfTTobool())});
      if (count < 1) dart.throw(new core.ArgumentError.value(count, "count"));
      if (startBufferEvery < 0) {
        dart.throw(new core.ArgumentError.value(startBufferEvery, "startBufferEvery"));
      }
    }).prototype = WindowCountStreamTransformer.prototype;
    dart.addTypeTests(WindowCountStreamTransformer);
    WindowCountStreamTransformer.prototype[_is_WindowCountStreamTransformer_default] = true;
    dart.addTypeCaches(WindowCountStreamTransformer);
    dart.setLibraryUri(WindowCountStreamTransformer, I[13]);
    return WindowCountStreamTransformer;
  });
  window$.WindowCountStreamTransformer = window$.WindowCountStreamTransformer$();
  dart.addTypeTests(window$.WindowCountStreamTransformer, _is_WindowCountStreamTransformer_default);
  const _is_WindowTestStreamTransformer_default = Symbol('_is_WindowTestStreamTransformer_default');
  window$.WindowTestStreamTransformer$ = dart.generic(T => {
    var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
    var ListOfT = () => (ListOfT = dart.constFn(core.List$(T)))();
    var ListOfTToStreamOfT = () => (ListOfTToStreamOfT = dart.constFn(dart.fnType(StreamOfT(), [ListOfT()])))();
    var IterableOfT = () => (IterableOfT = dart.constFn(core.Iterable$(T)))();
    var IterableOfTTobool = () => (IterableOfTTobool = dart.constFn(dart.fnType(core.bool, [IterableOfT()])))();
    class WindowTestStreamTransformer extends backpressure.BackpressureStreamTransformer$(T, async.Stream$(T)) {}
    (WindowTestStreamTransformer.new = function(test) {
      WindowTestStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.onHandler, null, {onWindowEnd: dart.fn(queue => StreamOfT().fromIterable(queue), ListOfTToStreamOfT()), closeWindowWhen: dart.fn(queue => test(queue[$last]), IterableOfTTobool())});
      ;
    }).prototype = WindowTestStreamTransformer.prototype;
    dart.addTypeTests(WindowTestStreamTransformer);
    WindowTestStreamTransformer.prototype[_is_WindowTestStreamTransformer_default] = true;
    dart.addTypeCaches(WindowTestStreamTransformer);
    dart.setLibraryUri(WindowTestStreamTransformer, I[13]);
    return WindowTestStreamTransformer;
  });
  window$.WindowTestStreamTransformer = window$.WindowTestStreamTransformer$();
  dart.addTypeTests(window$.WindowTestStreamTransformer, _is_WindowTestStreamTransformer_default);
  window$['WindowExtensions|window'] = function WindowExtensions$124window(T, $this, window) {
    return $this.transform(async.Stream$(T), new (window$.WindowStreamTransformer$(T)).new(dart.fn(_ => window, dart.fnType(async.Stream, [T]))));
  };
  window$['WindowExtensions|get#window'] = function WindowExtensions$124get$35window(T, $this) {
    return dart.fn(window => window$['WindowExtensions|window'](T, $this, window), dart.fnType(async.Stream$(async.Stream$(T)), [async.Stream]));
  };
  window$['WindowExtensions|windowCount'] = function WindowExtensions$124windowCount(T, $this, count, startBufferEvery = 0) {
    return $this.transform(async.Stream$(T), new (window$.WindowCountStreamTransformer$(T)).new(count, startBufferEvery));
  };
  window$['WindowExtensions|get#windowCount'] = function WindowExtensions$124get$35windowCount(T, $this) {
    return dart.fn((count, startBufferEvery = 0) => window$['WindowExtensions|windowCount'](T, $this, count, startBufferEvery), dart.fnType(async.Stream$(async.Stream$(T)), [core.int], [core.int]));
  };
  window$['WindowExtensions|windowTest'] = function WindowExtensions$124windowTest(T, $this, onTestHandler) {
    return $this.transform(async.Stream$(T), new (window$.WindowTestStreamTransformer$(T)).new(onTestHandler));
  };
  window$['WindowExtensions|get#windowTest'] = function WindowExtensions$124get$35windowTest(T, $this) {
    return dart.fn(onTestHandler => window$['WindowExtensions|windowTest'](T, $this, onTestHandler), dart.fnType(async.Stream$(async.Stream$(T)), [dart.fnType(core.bool, [T])]));
  };
  window$['WindowExtensions|windowTime'] = function WindowExtensions$124windowTime(T, $this, duration) {
    return window$['WindowExtensions|window'](T, $this, T$.StreamOfvoid().periodic(duration));
  };
  window$['WindowExtensions|get#windowTime'] = function WindowExtensions$124get$35windowTime(T, $this) {
    return dart.fn(duration => window$['WindowExtensions|windowTime'](T, $this, duration), dart.fnType(async.Stream$(async.Stream$(T)), [core.Duration]));
  };
  const _is_ThrottleStreamTransformer_default = Symbol('_is_ThrottleStreamTransformer_default');
  throttle.ThrottleStreamTransformer$ = dart.generic(T => {
    var TToT = () => (TToT = dart.constFn(dart.fnType(T, [T])))();
    var ListOfT = () => (ListOfT = dart.constFn(core.List$(T)))();
    var ListOfTToT = () => (ListOfTToT = dart.constFn(dart.fnType(T, [ListOfT()])))();
    class ThrottleStreamTransformer extends backpressure.BackpressureStreamTransformer$(T, T) {}
    (ThrottleStreamTransformer.new = function(window, opts) {
      let trailing = opts && 'trailing' in opts ? opts.trailing : false;
      let leading = opts && 'leading' in opts ? opts.leading : true;
      ThrottleStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.eventAfterLastWindow, window, {onWindowStart: leading ? dart.fn(event => event, TToT()) : null, onWindowEnd: trailing ? dart.fn(queue => queue[$last], ListOfTToT()) : null, dispatchOnClose: trailing, maxLengthQueue: trailing ? 2 : 0});
      ;
    }).prototype = ThrottleStreamTransformer.prototype;
    dart.addTypeTests(ThrottleStreamTransformer);
    ThrottleStreamTransformer.prototype[_is_ThrottleStreamTransformer_default] = true;
    dart.addTypeCaches(ThrottleStreamTransformer);
    dart.setLibraryUri(ThrottleStreamTransformer, I[14]);
    return ThrottleStreamTransformer;
  });
  throttle.ThrottleStreamTransformer = throttle.ThrottleStreamTransformer$();
  dart.addTypeTests(throttle.ThrottleStreamTransformer, _is_ThrottleStreamTransformer_default);
  throttle['ThrottleExtensions|throttle'] = function ThrottleExtensions$124throttle(T, $this, window, opts) {
    let trailing = opts && 'trailing' in opts ? opts.trailing : false;
    let leading = opts && 'leading' in opts ? opts.leading : true;
    return $this.transform(T, new (throttle.ThrottleStreamTransformer$(T)).new(window, {trailing: trailing, leading: leading}));
  };
  throttle['ThrottleExtensions|get#throttle'] = function ThrottleExtensions$124get$35throttle(T, $this) {
    return dart.fn((window, opts) => {
      let trailing = opts && 'trailing' in opts ? opts.trailing : false;
      let leading = opts && 'leading' in opts ? opts.leading : true;
      return throttle['ThrottleExtensions|throttle'](T, $this, window, {trailing: trailing, leading: leading});
    }, dart.fnType(async.Stream$(T), [dart.fnType(async.Stream, [T])], {leading: core.bool, trailing: core.bool}, {}));
  };
  throttle['ThrottleExtensions|throttleTime'] = function ThrottleExtensions$124throttleTime(T, $this, duration, opts) {
    let trailing = opts && 'trailing' in opts ? opts.trailing : false;
    let leading = opts && 'leading' in opts ? opts.leading : true;
    core.ArgumentError.checkNotNull(core.Duration, duration, "duration");
    return $this.transform(T, new (throttle.ThrottleStreamTransformer$(T)).new(dart.fn(_ => new (T$.TimerStreamOfbool()).new(true, duration), dart.fnType(T$.TimerStreamOfbool(), [T])), {trailing: trailing, leading: leading}));
  };
  throttle['ThrottleExtensions|get#throttleTime'] = function ThrottleExtensions$124get$35throttleTime(T, $this) {
    return dart.fn((duration, opts) => {
      let trailing = opts && 'trailing' in opts ? opts.trailing : false;
      let leading = opts && 'leading' in opts ? opts.leading : true;
      return throttle['ThrottleExtensions|throttleTime'](T, $this, duration, {trailing: trailing, leading: leading});
    }, dart.fnType(async.Stream$(T), [core.Duration], {leading: core.bool, trailing: core.bool}, {}));
  };
  const _is_SampleStreamTransformer_default = Symbol('_is_SampleStreamTransformer_default');
  sample.SampleStreamTransformer$ = dart.generic(T => {
    var IterableOfT = () => (IterableOfT = dart.constFn(core.Iterable$(T)))();
    var IterableOfTToT = () => (IterableOfTToT = dart.constFn(dart.fnType(T, [IterableOfT()])))();
    class SampleStreamTransformer extends backpressure.BackpressureStreamTransformer$(T, T) {}
    (SampleStreamTransformer.new = function(window) {
      SampleStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.firstEventOnly, window, {onWindowEnd: dart.fn(queue => queue[$last], IterableOfTToT())});
      ;
    }).prototype = SampleStreamTransformer.prototype;
    dart.addTypeTests(SampleStreamTransformer);
    SampleStreamTransformer.prototype[_is_SampleStreamTransformer_default] = true;
    dart.addTypeCaches(SampleStreamTransformer);
    dart.setLibraryUri(SampleStreamTransformer, I[15]);
    return SampleStreamTransformer;
  });
  sample.SampleStreamTransformer = sample.SampleStreamTransformer$();
  dart.addTypeTests(sample.SampleStreamTransformer, _is_SampleStreamTransformer_default);
  sample['SampleExtensions|sample'] = function SampleExtensions$124sample(T, $this, sampleStream) {
    return $this.transform(T, new (sample.SampleStreamTransformer$(T)).new(dart.fn(_ => sampleStream, dart.fnType(async.Stream, [T]))));
  };
  sample['SampleExtensions|get#sample'] = function SampleExtensions$124get$35sample(T, $this) {
    return dart.fn(sampleStream => sample['SampleExtensions|sample'](T, $this, sampleStream), dart.fnType(async.Stream$(T), [async.Stream]));
  };
  sample['SampleExtensions|sampleTime'] = function SampleExtensions$124sampleTime(T, $this, duration) {
    return sample['SampleExtensions|sample'](T, $this, T$.StreamOfvoid().periodic(duration));
  };
  sample['SampleExtensions|get#sampleTime'] = function SampleExtensions$124get$35sampleTime(T, $this) {
    return dart.fn(duration => sample['SampleExtensions|sampleTime'](T, $this, duration), dart.fnType(async.Stream$(T), [core.Duration]));
  };
  const _is_PairwiseStreamTransformer_default = Symbol('_is_PairwiseStreamTransformer_default');
  pairwise.PairwiseStreamTransformer$ = dart.generic(T => {
    var TToNeverStreamOfvoid = () => (TToNeverStreamOfvoid = dart.constFn(dart.fnType(T$.NeverStreamOfvoid(), [T])))();
    var IterableOfT = () => (IterableOfT = dart.constFn(core.Iterable$(T)))();
    var IterableOfTToIterableOfT = () => (IterableOfTToIterableOfT = dart.constFn(dart.fnType(IterableOfT(), [IterableOfT()])))();
    var IterableOfTTobool = () => (IterableOfTTobool = dart.constFn(dart.fnType(core.bool, [IterableOfT()])))();
    class PairwiseStreamTransformer extends backpressure.BackpressureStreamTransformer$(T, core.Iterable$(T)) {}
    (PairwiseStreamTransformer.new = function() {
      PairwiseStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.firstEventOnly, dart.fn(_ => new (T$.NeverStreamOfvoid()).new(), TToNeverStreamOfvoid()), {onWindowEnd: dart.fn(queue => queue, IterableOfTToIterableOfT()), startBufferEvery: 1, closeWindowWhen: dart.fn(queue => queue[$length] === 2, IterableOfTTobool()), dispatchOnClose: false});
      ;
    }).prototype = PairwiseStreamTransformer.prototype;
    dart.addTypeTests(PairwiseStreamTransformer);
    PairwiseStreamTransformer.prototype[_is_PairwiseStreamTransformer_default] = true;
    dart.addTypeCaches(PairwiseStreamTransformer);
    dart.setLibraryUri(PairwiseStreamTransformer, I[16]);
    return PairwiseStreamTransformer;
  });
  pairwise.PairwiseStreamTransformer = pairwise.PairwiseStreamTransformer$();
  dart.addTypeTests(pairwise.PairwiseStreamTransformer, _is_PairwiseStreamTransformer_default);
  pairwise['PairwiseExtension|pairwise'] = function PairwiseExtension$124pairwise(T, $this) {
    return $this.transform(core.Iterable$(T), new (pairwise.PairwiseStreamTransformer$(T)).new());
  };
  pairwise['PairwiseExtension|get#pairwise'] = function PairwiseExtension$124get$35pairwise(T, $this) {
    return dart.fn(() => pairwise['PairwiseExtension|pairwise'](T, $this), dart.fnType(async.Stream$(core.Iterable$(T)), []));
  };
  const _is_DebounceStreamTransformer_default = Symbol('_is_DebounceStreamTransformer_default');
  debounce.DebounceStreamTransformer$ = dart.generic(T => {
    var IterableOfT = () => (IterableOfT = dart.constFn(core.Iterable$(T)))();
    var IterableOfTToT = () => (IterableOfTToT = dart.constFn(dart.fnType(T, [IterableOfT()])))();
    class DebounceStreamTransformer extends backpressure.BackpressureStreamTransformer$(T, T) {}
    (DebounceStreamTransformer.new = function(window) {
      DebounceStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.everyEvent, window, {onWindowEnd: dart.fn(queue => queue[$last], IterableOfTToT()), maxLengthQueue: 1});
      ;
    }).prototype = DebounceStreamTransformer.prototype;
    dart.addTypeTests(DebounceStreamTransformer);
    DebounceStreamTransformer.prototype[_is_DebounceStreamTransformer_default] = true;
    dart.addTypeCaches(DebounceStreamTransformer);
    dart.setLibraryUri(DebounceStreamTransformer, I[17]);
    return DebounceStreamTransformer;
  });
  debounce.DebounceStreamTransformer = debounce.DebounceStreamTransformer$();
  dart.addTypeTests(debounce.DebounceStreamTransformer, _is_DebounceStreamTransformer_default);
  debounce['DebounceExtensions|debounce'] = function DebounceExtensions$124debounce(T, $this, window) {
    return $this.transform(T, new (debounce.DebounceStreamTransformer$(T)).new(window));
  };
  debounce['DebounceExtensions|get#debounce'] = function DebounceExtensions$124get$35debounce(T, $this) {
    return dart.fn(window => debounce['DebounceExtensions|debounce'](T, $this, window), dart.fnType(async.Stream$(T), [dart.fnType(async.Stream, [T])]));
  };
  debounce['DebounceExtensions|debounceTime'] = function DebounceExtensions$124debounceTime(T, $this, duration) {
    return $this.transform(T, new (debounce.DebounceStreamTransformer$(T)).new(dart.fn(_ => new (T$.TimerStreamOfvoid()).new(null, duration), dart.fnType(T$.TimerStreamOfvoid(), [T]))));
  };
  debounce['DebounceExtensions|get#debounceTime'] = function DebounceExtensions$124get$35debounceTime(T, $this) {
    return dart.fn(duration => debounce['DebounceExtensions|debounceTime'](T, $this, duration), dart.fnType(async.Stream$(T), [core.Duration]));
  };
  var _name$ = dart.privateName(backpressure, "_name");
  backpressure.WindowStrategy = class WindowStrategy extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (backpressure.WindowStrategy.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = backpressure.WindowStrategy.prototype;
  dart.addTypeTests(backpressure.WindowStrategy);
  dart.addTypeCaches(backpressure.WindowStrategy);
  dart.setLibraryUri(backpressure.WindowStrategy, I[12]);
  dart.setFieldSignature(backpressure.WindowStrategy, () => ({
    __proto__: dart.getFields(backpressure.WindowStrategy.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(backpressure.WindowStrategy, ['toString']);
  backpressure.WindowStrategy.everyEvent = C[0] || CT.C0;
  backpressure.WindowStrategy.eventAfterLastWindow = C[1] || CT.C1;
  backpressure.WindowStrategy.firstEventOnly = C[2] || CT.C2;
  backpressure.WindowStrategy.onHandler = C[3] || CT.C3;
  backpressure.WindowStrategy.values = C[4] || CT.C4;
  var _hasData = dart.privateName(backpressure, "_hasData");
  var _mainClosed = dart.privateName(backpressure, "_mainClosed");
  var _windowSubscription = dart.privateName(backpressure, "_windowSubscription");
  var _strategy$ = dart.privateName(backpressure, "_strategy");
  var _windowStreamFactory$ = dart.privateName(backpressure, "_windowStreamFactory");
  var _onWindowStart$ = dart.privateName(backpressure, "_onWindowStart");
  var _onWindowEnd$ = dart.privateName(backpressure, "_onWindowEnd");
  var _startBufferEvery$ = dart.privateName(backpressure, "_startBufferEvery");
  var _closeWindowWhen$ = dart.privateName(backpressure, "_closeWindowWhen");
  var _ignoreEmptyWindows$ = dart.privateName(backpressure, "_ignoreEmptyWindows");
  var _dispatchOnClose$ = dart.privateName(backpressure, "_dispatchOnClose");
  const _is__BackpressureStreamSink_default = Symbol('_is__BackpressureStreamSink_default');
  backpressure._BackpressureStreamSink$ = dart.generic((S, T) => {
    var DoubleLinkedQueueOfS = () => (DoubleLinkedQueueOfS = dart.constFn(collection.DoubleLinkedQueue$(S)))();
    var ListOfS = () => (ListOfS = dart.constFn(core.List$(S)))();
    var EventSinkOfT = () => (EventSinkOfT = dart.constFn(async.EventSink$(T)))();
    class _BackpressureStreamSink extends core.Object {
      add(sink, data) {
        EventSinkOfT().as(sink);
        S.as(data);
        this[_hasData] = true;
        this.maybeCreateWindow(data, sink);
        if (this.skip === 0) {
          this.queue.add(data);
          if (this.maxLengthQueue != null && this.queue[$length] > dart.nullCheck(this.maxLengthQueue)) {
            backpressure['_RemoveFirstNQueueExtension|removeFirstElements'](S, this.queue, this.queue[$length] - dart.nullCheck(this.maxLengthQueue));
          }
        }
        if (this.skip > 0) {
          this.skip = this.skip - 1;
        }
        this.maybeCloseWindow(sink);
      }
      addError(sink, e, st = null) {
        EventSinkOfT().as(sink);
        return sink.addError(e, st);
      }
      close(sink) {
        let t103;
        EventSinkOfT().as(sink);
        this[_mainClosed] = true;
        if (this[_strategy$] === backpressure.WindowStrategy.eventAfterLastWindow) {
          return;
        }
        if (this[_dispatchOnClose$] && this.queue[$isNotEmpty]) {
          this.resolveWindowStart(this.queue[$last], sink);
        }
        this.resolveWindowEnd(sink, true);
        this.queue.clear();
        t103 = this[_windowSubscription];
        t103 == null ? null : t103.cancel();
        sink.close();
      }
      onCancel(sink) {
        let t103;
        EventSinkOfT().as(sink);
        t103 = this[_windowSubscription];
        return t103 == null ? null : t103.cancel();
      }
      onListen(sink) {
        EventSinkOfT().as(sink);
      }
      onPause(sink) {
        let t103;
        EventSinkOfT().as(sink);
        t103 = this[_windowSubscription];
        return t103 == null ? null : t103.pause();
      }
      onResume(sink) {
        let t103;
        EventSinkOfT().as(sink);
        t103 = this[_windowSubscription];
        return t103 == null ? null : t103.resume();
      }
      maybeCreateWindow(event, sink) {
        let t103;
        S.as(event);
        EventSinkOfT().as(sink);
        switch (this[_strategy$]) {
          case C[1] || CT.C1:
          {
            if (this[_windowSubscription] != null) return;
            this[_windowSubscription] = this.singleWindow(event, sink);
            this.resolveWindowStart(event, sink);
            break;
          }
          case C[2] || CT.C2:
          {
            if (this[_windowSubscription] != null) return;
            this[_windowSubscription] = this.multiWindow(event, sink);
            this.resolveWindowStart(event, sink);
            break;
          }
          case C[0] || CT.C0:
          {
            t103 = this[_windowSubscription];
            t103 == null ? null : t103.cancel();
            this[_windowSubscription] = this.singleWindow(event, sink);
            this.resolveWindowStart(event, sink);
            break;
          }
          case C[3] || CT.C3:
          {
            break;
          }
        }
      }
      maybeCloseWindow(sink) {
        EventSinkOfT().as(sink);
        if (this[_closeWindowWhen$] != null && dart.nullCheck(this[_closeWindowWhen$])(this.unmodifiableQueue)) {
          this.resolveWindowEnd(sink);
        }
      }
      singleWindow(event, sink) {
        S.as(event);
        EventSinkOfT().as(sink);
        return this.buildStream(event, sink).take(1).listen(null, {onError: dart.bind(sink, 'addError'), onDone: dart.fn(() => this.resolveWindowEnd(sink, this[_mainClosed]), T$.VoidTovoid())});
      }
      multiWindow(event, sink) {
        S.as(event);
        EventSinkOfT().as(sink);
        return this.buildStream(event, sink).listen(dart.fn(_ => this.resolveWindowEnd(sink), T$.dynamicTovoid()), {onError: dart.bind(sink, 'addError'), onDone: dart.fn(() => this.resolveWindowEnd(sink), T$.VoidTovoid())});
      }
      buildStream(event, sink) {
        let t103;
        S.as(event);
        EventSinkOfT().as(sink);
        let stream = null;
        t103 = this[_windowSubscription];
        t103 == null ? null : t103.cancel();
        stream = dart.nullCheck(this[_windowStreamFactory$])(event);
        return stream;
      }
      resolveWindowStart(event, sink) {
        S.as(event);
        EventSinkOfT().as(sink);
        if (this[_onWindowStart$] != null) {
          sink.add(dart.nullCheck(this[_onWindowStart$])(event));
        }
      }
      resolveWindowEnd(sink, isControllerClosing = false) {
        let t103, t103$;
        EventSinkOfT().as(sink);
        if (isControllerClosing && this[_strategy$] === backpressure.WindowStrategy.eventAfterLastWindow) {
          if (this[_dispatchOnClose$] && this[_hasData] && this.queue[$length] > 1 && this[_onWindowEnd$] != null) {
            sink.add(dart.nullCheck(this[_onWindowEnd$])(this.unmodifiableQueue));
          }
          this.queue.clear();
          t103 = this[_windowSubscription];
          t103 == null ? null : t103.cancel();
          this[_windowSubscription] = null;
          sink.close();
          return;
        }
        if (isControllerClosing || this[_strategy$] === backpressure.WindowStrategy.eventAfterLastWindow || this[_strategy$] === backpressure.WindowStrategy.everyEvent) {
          t103$ = this[_windowSubscription];
          t103$ == null ? null : t103$.cancel();
          this[_windowSubscription] = null;
        }
        if (isControllerClosing && !this[_dispatchOnClose$]) {
          return;
        }
        if (this[_hasData] && (this.queue[$isNotEmpty] || !this[_ignoreEmptyWindows$])) {
          if (this[_onWindowEnd$] != null) {
            sink.add(dart.nullCheck(this[_onWindowEnd$])(this.unmodifiableQueue));
          }
          if (!isControllerClosing && this[_startBufferEvery$] > 0) {
            this.skip = this[_startBufferEvery$] > this.queue[$length] ? this[_startBufferEvery$] - this.queue[$length] : 0;
            if (this[_startBufferEvery$] < this.queue[$length]) {
              backpressure['_RemoveFirstNQueueExtension|removeFirstElements'](S, this.queue, this[_startBufferEvery$]);
            } else {
              this.queue.clear();
            }
          } else {
            this.queue.clear();
          }
        }
      }
      get unmodifiableQueue() {
        return ListOfS().unmodifiable(this.queue);
      }
    }
    (_BackpressureStreamSink.new = function(_strategy, _windowStreamFactory, _onWindowStart, _onWindowEnd, _startBufferEvery, _closeWindowWhen, _ignoreEmptyWindows, _dispatchOnClose, maxLengthQueue) {
      this.queue = new (DoubleLinkedQueueOfS()).new();
      this.skip = 0;
      this[_hasData] = false;
      this[_mainClosed] = false;
      this[_windowSubscription] = null;
      this[_strategy$] = _strategy;
      this[_windowStreamFactory$] = _windowStreamFactory;
      this[_onWindowStart$] = _onWindowStart;
      this[_onWindowEnd$] = _onWindowEnd;
      this[_startBufferEvery$] = _startBufferEvery;
      this[_closeWindowWhen$] = _closeWindowWhen;
      this[_ignoreEmptyWindows$] = _ignoreEmptyWindows;
      this[_dispatchOnClose$] = _dispatchOnClose;
      this.maxLengthQueue = maxLengthQueue;
      ;
    }).prototype = _BackpressureStreamSink.prototype;
    dart.addTypeTests(_BackpressureStreamSink);
    _BackpressureStreamSink.prototype[_is__BackpressureStreamSink_default] = true;
    dart.addTypeCaches(_BackpressureStreamSink);
    _BackpressureStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(S, T)];
    dart.setMethodSignature(_BackpressureStreamSink, () => ({
      __proto__: dart.getMethods(_BackpressureStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [dart.nullable(core.Object), core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      maybeCreateWindow: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      maybeCloseWindow: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      singleWindow: dart.fnType(async.StreamSubscription, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      multiWindow: dart.fnType(async.StreamSubscription, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      buildStream: dart.fnType(async.Stream, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      resolveWindowStart: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      resolveWindowEnd: dart.fnType(dart.void, [dart.nullable(core.Object)], [core.bool])
    }));
    dart.setGetterSignature(_BackpressureStreamSink, () => ({
      __proto__: dart.getGetters(_BackpressureStreamSink.__proto__),
      unmodifiableQueue: core.List$(S)
    }));
    dart.setLibraryUri(_BackpressureStreamSink, I[12]);
    dart.setFieldSignature(_BackpressureStreamSink, () => ({
      __proto__: dart.getFields(_BackpressureStreamSink.__proto__),
      [_strategy$]: dart.finalFieldType(backpressure.WindowStrategy),
      [_windowStreamFactory$]: dart.finalFieldType(dart.nullable(dart.fnType(async.Stream, [S]))),
      [_onWindowStart$]: dart.finalFieldType(dart.nullable(dart.fnType(T, [S]))),
      [_onWindowEnd$]: dart.finalFieldType(dart.nullable(dart.fnType(T, [core.List$(S)]))),
      [_startBufferEvery$]: dart.finalFieldType(core.int),
      [_closeWindowWhen$]: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [core.List$(S)]))),
      [_ignoreEmptyWindows$]: dart.finalFieldType(core.bool),
      [_dispatchOnClose$]: dart.finalFieldType(core.bool),
      queue: dart.finalFieldType(collection.Queue$(S)),
      maxLengthQueue: dart.finalFieldType(dart.nullable(core.int)),
      skip: dart.fieldType(core.int),
      [_hasData]: dart.fieldType(core.bool),
      [_mainClosed]: dart.fieldType(core.bool),
      [_windowSubscription]: dart.fieldType(dart.nullable(async.StreamSubscription))
    }));
    return _BackpressureStreamSink;
  });
  backpressure._BackpressureStreamSink = backpressure._BackpressureStreamSink$();
  dart.addTypeTests(backpressure._BackpressureStreamSink, _is__BackpressureStreamSink_default);
  backpressure['_RemoveFirstNQueueExtension|removeFirstElements'] = function _RemoveFirstNQueueExtension$124removeFirstElements$(T, $this, count) {
    for (let i = 0; i < count; i = i + 1) {
      $this.removeFirst();
    }
  };
  backpressure['_RemoveFirstNQueueExtension|get#removeFirstElements'] = function _RemoveFirstNQueueExtension$124get$35removeFirstElements$(T, $this) {
    return dart.fn(count => backpressure['_RemoveFirstNQueueExtension|removeFirstElements'](T, $this, count), T$.intTovoid());
  };
  const _is_BufferStreamTransformer_default = Symbol('_is_BufferStreamTransformer_default');
  buffer.BufferStreamTransformer$ = dart.generic(T => {
    var ListOfT = () => (ListOfT = dart.constFn(core.List$(T)))();
    var ListOfTToListOfT = () => (ListOfTToListOfT = dart.constFn(dart.fnType(ListOfT(), [ListOfT()])))();
    class BufferStreamTransformer extends backpressure.BackpressureStreamTransformer$(T, core.List$(T)) {}
    (BufferStreamTransformer.new = function(window) {
      BufferStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.firstEventOnly, window, {onWindowEnd: dart.fn(queue => queue, ListOfTToListOfT()), ignoreEmptyWindows: false});
      ;
    }).prototype = BufferStreamTransformer.prototype;
    dart.addTypeTests(BufferStreamTransformer);
    BufferStreamTransformer.prototype[_is_BufferStreamTransformer_default] = true;
    dart.addTypeCaches(BufferStreamTransformer);
    dart.setLibraryUri(BufferStreamTransformer, I[18]);
    return BufferStreamTransformer;
  });
  buffer.BufferStreamTransformer = buffer.BufferStreamTransformer$();
  dart.addTypeTests(buffer.BufferStreamTransformer, _is_BufferStreamTransformer_default);
  const _is_BufferCountStreamTransformer_default = Symbol('_is_BufferCountStreamTransformer_default');
  buffer.BufferCountStreamTransformer$ = dart.generic(T => {
    var ListOfT = () => (ListOfT = dart.constFn(core.List$(T)))();
    var ListOfTToListOfT = () => (ListOfTToListOfT = dart.constFn(dart.fnType(ListOfT(), [ListOfT()])))();
    var IterableOfT = () => (IterableOfT = dart.constFn(core.Iterable$(T)))();
    var IterableOfTTobool = () => (IterableOfTTobool = dart.constFn(dart.fnType(core.bool, [IterableOfT()])))();
    class BufferCountStreamTransformer extends backpressure.BackpressureStreamTransformer$(T, core.List$(T)) {}
    (BufferCountStreamTransformer.new = function(count, startBufferEvery = 0) {
      BufferCountStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.onHandler, null, {onWindowEnd: dart.fn(queue => queue, ListOfTToListOfT()), startBufferEvery: startBufferEvery, closeWindowWhen: dart.fn(queue => queue[$length] === count, IterableOfTTobool())});
      if (count < 1) dart.throw(new core.ArgumentError.value(count, "count"));
      if (startBufferEvery < 0) {
        dart.throw(new core.ArgumentError.value(startBufferEvery, "startBufferEvery"));
      }
    }).prototype = BufferCountStreamTransformer.prototype;
    dart.addTypeTests(BufferCountStreamTransformer);
    BufferCountStreamTransformer.prototype[_is_BufferCountStreamTransformer_default] = true;
    dart.addTypeCaches(BufferCountStreamTransformer);
    dart.setLibraryUri(BufferCountStreamTransformer, I[18]);
    return BufferCountStreamTransformer;
  });
  buffer.BufferCountStreamTransformer = buffer.BufferCountStreamTransformer$();
  dart.addTypeTests(buffer.BufferCountStreamTransformer, _is_BufferCountStreamTransformer_default);
  const _is_BufferTestStreamTransformer_default = Symbol('_is_BufferTestStreamTransformer_default');
  buffer.BufferTestStreamTransformer$ = dart.generic(T => {
    var ListOfT = () => (ListOfT = dart.constFn(core.List$(T)))();
    var ListOfTToListOfT = () => (ListOfTToListOfT = dart.constFn(dart.fnType(ListOfT(), [ListOfT()])))();
    var IterableOfT = () => (IterableOfT = dart.constFn(core.Iterable$(T)))();
    var IterableOfTTobool = () => (IterableOfTTobool = dart.constFn(dart.fnType(core.bool, [IterableOfT()])))();
    class BufferTestStreamTransformer extends backpressure.BackpressureStreamTransformer$(T, core.List$(T)) {}
    (BufferTestStreamTransformer.new = function(test) {
      BufferTestStreamTransformer.__proto__.new.call(this, backpressure.WindowStrategy.onHandler, null, {onWindowEnd: dart.fn(queue => queue, ListOfTToListOfT()), closeWindowWhen: dart.fn(queue => test(queue[$last]), IterableOfTTobool())});
      ;
    }).prototype = BufferTestStreamTransformer.prototype;
    dart.addTypeTests(BufferTestStreamTransformer);
    BufferTestStreamTransformer.prototype[_is_BufferTestStreamTransformer_default] = true;
    dart.addTypeCaches(BufferTestStreamTransformer);
    dart.setLibraryUri(BufferTestStreamTransformer, I[18]);
    return BufferTestStreamTransformer;
  });
  buffer.BufferTestStreamTransformer = buffer.BufferTestStreamTransformer$();
  dart.addTypeTests(buffer.BufferTestStreamTransformer, _is_BufferTestStreamTransformer_default);
  buffer['BufferExtensions|buffer'] = function BufferExtensions$124buffer(T, $this, window) {
    return $this.transform(core.List$(T), new (buffer.BufferStreamTransformer$(T)).new(dart.fn(_ => window, dart.fnType(async.Stream, [T]))));
  };
  buffer['BufferExtensions|get#buffer'] = function BufferExtensions$124get$35buffer(T, $this) {
    return dart.fn(window => buffer['BufferExtensions|buffer'](T, $this, window), dart.fnType(async.Stream$(core.List$(T)), [async.Stream]));
  };
  buffer['BufferExtensions|bufferCount'] = function BufferExtensions$124bufferCount(T, $this, count, startBufferEvery = 0) {
    return $this.transform(core.List$(T), new (buffer.BufferCountStreamTransformer$(T)).new(count, startBufferEvery));
  };
  buffer['BufferExtensions|get#bufferCount'] = function BufferExtensions$124get$35bufferCount(T, $this) {
    return dart.fn((count, startBufferEvery = 0) => buffer['BufferExtensions|bufferCount'](T, $this, count, startBufferEvery), dart.fnType(async.Stream$(core.List$(T)), [core.int], [core.int]));
  };
  buffer['BufferExtensions|bufferTest'] = function BufferExtensions$124bufferTest(T, $this, onTestHandler) {
    return $this.transform(core.List$(T), new (buffer.BufferTestStreamTransformer$(T)).new(onTestHandler));
  };
  buffer['BufferExtensions|get#bufferTest'] = function BufferExtensions$124get$35bufferTest(T, $this) {
    return dart.fn(onTestHandler => buffer['BufferExtensions|bufferTest'](T, $this, onTestHandler), dart.fnType(async.Stream$(core.List$(T)), [dart.fnType(core.bool, [T])]));
  };
  buffer['BufferExtensions|bufferTime'] = function BufferExtensions$124bufferTime(T, $this, duration) {
    return buffer['BufferExtensions|buffer'](T, $this, T$.StreamOfvoid().periodic(duration));
  };
  buffer['BufferExtensions|get#bufferTime'] = function BufferExtensions$124get$35bufferTime(T, $this) {
    return dart.fn(duration => buffer['BufferExtensions|bufferTime'](T, $this, duration), dart.fnType(async.Stream$(core.List$(T)), [core.Duration]));
  };
  var _queue$ = dart.privateName(replay_subject, "_queue");
  var _maxSize$ = dart.privateName(replay_subject, "_maxSize");
  const _is_ReplaySubject_default = Symbol('_is_ReplaySubject_default');
  replay_subject.ReplaySubject$ = dart.generic(T => {
    var _EventOfT = () => (_EventOfT = dart.constFn(replay_subject._Event$(T)))();
    var _EventOfTTobool = () => (_EventOfTTobool = dart.constFn(dart.fnType(core.bool, [_EventOfT()])))();
    var _EventOfTToT = () => (_EventOfTToT = dart.constFn(dart.fnType(T, [_EventOfT()])))();
    var _EventOfTToErrorAndStackTrace = () => (_EventOfTToErrorAndStackTrace = dart.constFn(dart.fnType(error_and_stacktrace.ErrorAndStackTrace, [_EventOfT()])))();
    class ReplaySubject extends subject.Subject$(T) {
      static new(opts) {
        let maxSize = opts && 'maxSize' in opts ? opts.maxSize : null;
        let onListen = opts && 'onListen' in opts ? opts.onListen : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        let sync = opts && 'sync' in opts ? opts.sync : false;
        let controller = async.StreamController$(T).broadcast({onListen: onListen, onCancel: onCancel, sync: sync});
        let queue = new (collection.ListQueue$(replay_subject._Event$(T))).new();
        return new (replay_subject.ReplaySubject$(T)).__(controller, rx.Rx.defer(T, dart.fn(() => queue[$toList]({growable: false})[$reversed][$fold](async.Stream$(T), controller.stream, dart.fn((stream, event) => {
          if (event.isError) {
            let errorAndStackTrace = dart.nullCheck(event.errorAndStackTrace);
            return stream.transform(T, new (start_with_error.StartWithErrorStreamTransformer$(T)).new(errorAndStackTrace.error, errorAndStackTrace.stackTrace));
          } else {
            return stream.transform(T, new (start_with.StartWithStreamTransformer$(T)).new(dart.nullCheck(event.data).value));
          }
        }, dart.fnType(async.Stream$(T), [async.Stream$(T), replay_subject._Event$(T)]))), dart.fnType(async.Stream$(T), [])), {reusable: true}), queue, maxSize);
      }
      onAdd(event) {
        T.as(event);
        if (this[_queue$][$length] === this[_maxSize$]) {
          this[_queue$].removeFirst();
        }
        this[_queue$].add(_EventOfT().data(event));
      }
      onAddError(error, stackTrace = null) {
        if (this[_queue$][$length] === this[_maxSize$]) {
          this[_queue$].removeFirst();
        }
        this[_queue$].add(_EventOfT().error(new error_and_stacktrace.ErrorAndStackTrace.new(error, stackTrace)));
      }
      get values() {
        return this[_queue$][$where](dart.fn(event => !event.isError, _EventOfTTobool()))[$map](T, dart.fn(event => dart.nullCheck(event.data).value, _EventOfTToT()))[$toList]({growable: false});
      }
      get errorAndStackTraces() {
        return this[_queue$][$where](dart.fn(event => event.isError, _EventOfTTobool()))[$map](error_and_stacktrace.ErrorAndStackTrace, dart.fn(event => dart.nullCheck(event.errorAndStackTrace), _EventOfTToErrorAndStackTrace()))[$toList]({growable: false});
      }
      createForwardingSubject(R, opts) {
        let onListen = opts && 'onListen' in opts ? opts.onListen : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        let sync = opts && 'sync' in opts ? opts.sync : false;
        return replay_subject.ReplaySubject$(R).new({maxSize: this[_maxSize$], onCancel: onCancel, onListen: onListen, sync: sync});
      }
    }
    (ReplaySubject.__ = function(controller, stream, _queue, _maxSize) {
      this[_queue$] = _queue;
      this[_maxSize$] = _maxSize;
      ReplaySubject.__proto__.new.call(this, controller, stream);
      ;
    }).prototype = ReplaySubject.prototype;
    dart.addTypeTests(ReplaySubject);
    ReplaySubject.prototype[_is_ReplaySubject_default] = true;
    dart.addTypeCaches(ReplaySubject);
    ReplaySubject[dart.implements] = () => [replay_stream.ReplayStream$(T)];
    dart.setMethodSignature(ReplaySubject, () => ({
      __proto__: dart.getMethods(ReplaySubject.__proto__),
      createForwardingSubject: dart.gFnType(R => [replay_subject.ReplaySubject$(R), [], {onCancel: dart.nullable(dart.fnType(dart.void, [])), onListen: dart.nullable(dart.fnType(dart.void, [])), sync: core.bool}, {}], R => [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(ReplaySubject, () => ({
      __proto__: dart.getGetters(ReplaySubject.__proto__),
      values: core.List$(T),
      errorAndStackTraces: core.List$(error_and_stacktrace.ErrorAndStackTrace)
    }));
    dart.setLibraryUri(ReplaySubject, I[19]);
    dart.setFieldSignature(ReplaySubject, () => ({
      __proto__: dart.getFields(ReplaySubject.__proto__),
      [_queue$]: dart.finalFieldType(collection.Queue$(replay_subject._Event$(T))),
      [_maxSize$]: dart.finalFieldType(dart.nullable(core.int))
    }));
    return ReplaySubject;
  });
  replay_subject.ReplaySubject = replay_subject.ReplaySubject$();
  dart.addTypeTests(replay_subject.ReplaySubject, _is_ReplaySubject_default);
  const _is__Event_default = Symbol('_is__Event_default');
  replay_subject._Event$ = dart.generic(T => {
    class _Event extends core.Object {
      static data(data) {
        return new (replay_subject._Event$(T)).__({isError: false, data: new (value_wrapper.ValueWrapper$(T)).new(data)});
      }
      static error(e) {
        return new (replay_subject._Event$(T)).__({isError: true, errorAndStackTrace: e});
      }
    }
    (_Event.__ = function(opts) {
      let isError = opts && 'isError' in opts ? opts.isError : null;
      let data = opts && 'data' in opts ? opts.data : null;
      let errorAndStackTrace = opts && 'errorAndStackTrace' in opts ? opts.errorAndStackTrace : null;
      this.isError = isError;
      this.data = data;
      this.errorAndStackTrace = errorAndStackTrace;
      ;
    }).prototype = _Event.prototype;
    dart.addTypeTests(_Event);
    _Event.prototype[_is__Event_default] = true;
    dart.addTypeCaches(_Event);
    dart.setLibraryUri(_Event, I[19]);
    dart.setFieldSignature(_Event, () => ({
      __proto__: dart.getFields(_Event.__proto__),
      isError: dart.finalFieldType(core.bool),
      data: dart.finalFieldType(dart.nullable(value_wrapper.ValueWrapper$(T))),
      errorAndStackTrace: dart.finalFieldType(dart.nullable(error_and_stacktrace.ErrorAndStackTrace))
    }));
    return _Event;
  });
  replay_subject._Event = replay_subject._Event$();
  dart.addTypeTests(replay_subject._Event, _is__Event_default);
  var _isFirstEventAdded$ = dart.privateName(start_with_error, "_isFirstEventAdded");
  var _e$ = dart.privateName(start_with_error, "_e");
  var _st$ = dart.privateName(start_with_error, "_st");
  var _safeAddFirstEvent$ = dart.privateName(start_with_error, "_safeAddFirstEvent");
  const _is__StartWithErrorStreamSink_default = Symbol('_is__StartWithErrorStreamSink_default');
  start_with_error._StartWithErrorStreamSink$ = dart.generic(S => {
    var EventSinkOfS = () => (EventSinkOfS = dart.constFn(async.EventSink$(S)))();
    class _StartWithErrorStreamSink extends core.Object {
      add(sink, data) {
        EventSinkOfS().as(sink);
        S.as(data);
        this[_safeAddFirstEvent$](sink);
        sink.add(data);
      }
      addError(sink, e, st = null) {
        EventSinkOfS().as(sink);
        this[_safeAddFirstEvent$](sink);
        sink.addError(e, st);
      }
      close(sink) {
        EventSinkOfS().as(sink);
        this[_safeAddFirstEvent$](sink);
        sink.close();
      }
      onCancel(sink) {
        EventSinkOfS().as(sink);
      }
      onListen(sink) {
        EventSinkOfS().as(sink);
        async.scheduleMicrotask(dart.fn(() => this[_safeAddFirstEvent$](sink), T$.VoidTovoid()));
      }
      onPause(sink) {
        EventSinkOfS().as(sink);
      }
      onResume(sink) {
        EventSinkOfS().as(sink);
      }
      [_safeAddFirstEvent$](sink) {
        if (this[_isFirstEventAdded$]) return;
        sink.addError(this[_e$], this[_st$]);
        this[_isFirstEventAdded$] = true;
      }
    }
    (_StartWithErrorStreamSink.new = function(_e, _st) {
      this[_isFirstEventAdded$] = false;
      this[_e$] = _e;
      this[_st$] = _st;
      ;
    }).prototype = _StartWithErrorStreamSink.prototype;
    dart.addTypeTests(_StartWithErrorStreamSink);
    _StartWithErrorStreamSink.prototype[_is__StartWithErrorStreamSink_default] = true;
    dart.addTypeCaches(_StartWithErrorStreamSink);
    _StartWithErrorStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(S, S)];
    dart.setMethodSignature(_StartWithErrorStreamSink, () => ({
      __proto__: dart.getMethods(_StartWithErrorStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [dart.nullable(core.Object), core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [_safeAddFirstEvent$]: dart.fnType(dart.void, [async.EventSink$(S)])
    }));
    dart.setLibraryUri(_StartWithErrorStreamSink, I[20]);
    dart.setFieldSignature(_StartWithErrorStreamSink, () => ({
      __proto__: dart.getFields(_StartWithErrorStreamSink.__proto__),
      [_e$]: dart.finalFieldType(core.Object),
      [_st$]: dart.finalFieldType(dart.nullable(core.StackTrace)),
      [_isFirstEventAdded$]: dart.fieldType(core.bool)
    }));
    return _StartWithErrorStreamSink;
  });
  start_with_error._StartWithErrorStreamSink = start_with_error._StartWithErrorStreamSink$();
  dart.addTypeTests(start_with_error._StartWithErrorStreamSink, _is__StartWithErrorStreamSink_default);
  var error$ = dart.privateName(start_with_error, "StartWithErrorStreamTransformer.error");
  var stackTrace$ = dart.privateName(start_with_error, "StartWithErrorStreamTransformer.stackTrace");
  const _is_StartWithErrorStreamTransformer_default = Symbol('_is_StartWithErrorStreamTransformer_default');
  start_with_error.StartWithErrorStreamTransformer$ = dart.generic(S => {
    var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
    var _StartWithErrorStreamSinkOfS = () => (_StartWithErrorStreamSinkOfS = dart.constFn(start_with_error._StartWithErrorStreamSink$(S)))();
    class StartWithErrorStreamTransformer extends async.StreamTransformerBase$(S, S) {
      get error() {
        return this[error$];
      }
      set error(value) {
        super.error = value;
      }
      get stackTrace() {
        return this[stackTrace$];
      }
      set stackTrace(value) {
        super.stackTrace = value;
      }
      bind(stream) {
        StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, S, stream, new (_StartWithErrorStreamSinkOfS()).new(this.error, this.stackTrace));
      }
    }
    (StartWithErrorStreamTransformer.new = function(error, stackTrace = null) {
      this[error$] = error;
      this[stackTrace$] = stackTrace;
      StartWithErrorStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = StartWithErrorStreamTransformer.prototype;
    dart.addTypeTests(StartWithErrorStreamTransformer);
    StartWithErrorStreamTransformer.prototype[_is_StartWithErrorStreamTransformer_default] = true;
    dart.addTypeCaches(StartWithErrorStreamTransformer);
    dart.setMethodSignature(StartWithErrorStreamTransformer, () => ({
      __proto__: dart.getMethods(StartWithErrorStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(S), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(StartWithErrorStreamTransformer, I[20]);
    dart.setFieldSignature(StartWithErrorStreamTransformer, () => ({
      __proto__: dart.getFields(StartWithErrorStreamTransformer.__proto__),
      error: dart.finalFieldType(core.Object),
      stackTrace: dart.finalFieldType(dart.nullable(core.StackTrace))
    }));
    return StartWithErrorStreamTransformer;
  });
  start_with_error.StartWithErrorStreamTransformer = start_with_error.StartWithErrorStreamTransformer$();
  dart.addTypeTests(start_with_error.StartWithErrorStreamTransformer, _is_StartWithErrorStreamTransformer_default);
  forwarding_stream.forwardStream = function forwardStream(T, R, stream, connectedSink) {
    core.ArgumentError.checkNotNull(async.Stream$(T), stream, "stream");
    core.ArgumentError.checkNotNull(forwarding_sink.ForwardingSink$(T, R), connectedSink, "connectedSink");
    let controller = null;
    function controller$35get() {
      let t114;
      t114 = controller;
      return t114 == null ? dart.throw(new _internal.LateError.localNI("controller")) : t114;
    }
    dart.fn(controller$35get, dart.fnType(async.StreamController$(R), []));
    function controller$35set(t115) {
      return controller = t115;
    }
    dart.fn(controller$35set, dart.fnType(dart.dynamic, [async.StreamController$(R)]));
    let subscription = null;
    function subscription$35get() {
      let t118;
      t118 = subscription;
      return t118 == null ? dart.throw(new _internal.LateError.localNI("subscription")) : t118;
    }
    dart.fn(subscription$35get, dart.fnType(async.StreamSubscription$(T), []));
    function subscription$35set(t119) {
      return subscription = t119;
    }
    dart.fn(subscription$35set, dart.fnType(dart.dynamic, [async.StreamSubscription$(T)]));
    function runCatching(block) {
      try {
        block();
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          connectedSink.addError(controller$35get(), e, s);
        } else
          throw e$;
      }
    }
    dart.fn(runCatching, T$.FnTovoid());
    let onListen = dart.fn(() => {
      runCatching(dart.fn(() => connectedSink.onListen(controller$35get()), T$.VoidTovoid()));
      subscription$35set(stream.listen(dart.fn(data => runCatching(dart.fn(() => connectedSink.add(controller$35get(), data), T$.VoidTovoid())), dart.fnType(dart.void, [T])), {onError: dart.fn((e, st) => runCatching(dart.fn(() => connectedSink.addError(controller$35get(), e, st), T$.VoidTovoid())), T$.ObjectAndStackTraceNTovoid()), onDone: dart.fn(() => runCatching(dart.fn(() => connectedSink.close(controller$35get()), T$.VoidTovoid())), T$.VoidTovoid())}));
    }, T$.VoidToNull());
    let onCancel = dart.fn(() => {
      let onCancelSelfFuture = subscription$35get().cancel();
      let onCancelConnectedFuture = connectedSink.onCancel(controller$35get());
      let futures = (() => {
        let t122 = T$.JSArrayOfFuture().of([]);
        if (async.Future.is(onCancelSelfFuture)) t122[$add](onCancelSelfFuture);
        if (async.Future.is(onCancelConnectedFuture)) t122[$add](onCancelConnectedFuture);
        return t122;
      })();
      return async.Future.wait(dart.dynamic, futures);
    }, T$.VoidToFutureOfList());
    let onPause = dart.fn(() => {
      subscription$35get().pause();
      runCatching(dart.fn(() => connectedSink.onPause(controller$35get()), T$.VoidTovoid()));
    }, T$.VoidToNull());
    let onResume = dart.fn(() => {
      subscription$35get().resume();
      runCatching(dart.fn(() => connectedSink.onResume(controller$35get()), T$.VoidTovoid()));
    }, T$.VoidToNull());
    if (subject.Subject$(T).is(stream)) {
      controller$35set(stream.createForwardingSubject(R, {onListen: onListen, onCancel: onCancel, sync: true}));
    } else if (stream.isBroadcast) {
      controller$35set(async.StreamController$(R).broadcast({onListen: onListen, onCancel: onCancel, sync: true}));
    } else {
      controller$35set(async.StreamController$(R).new({onListen: onListen, onPause: onPause, onResume: onResume, onCancel: onCancel, sync: true}));
    }
    return controller$35get().stream;
  };
  var _isFirstEventAdded$0 = dart.privateName(start_with, "_isFirstEventAdded");
  var _startValue$ = dart.privateName(start_with, "_startValue");
  var _safeAddFirstEvent$0 = dart.privateName(start_with, "_safeAddFirstEvent");
  const _is__StartWithStreamSink_default = Symbol('_is__StartWithStreamSink_default');
  start_with._StartWithStreamSink$ = dart.generic(S => {
    var EventSinkOfS = () => (EventSinkOfS = dart.constFn(async.EventSink$(S)))();
    class _StartWithStreamSink extends core.Object {
      add(sink, data) {
        EventSinkOfS().as(sink);
        S.as(data);
        this[_safeAddFirstEvent$0](sink);
        sink.add(data);
      }
      addError(sink, e, st = null) {
        EventSinkOfS().as(sink);
        this[_safeAddFirstEvent$0](sink);
        sink.addError(e, st);
      }
      close(sink) {
        EventSinkOfS().as(sink);
        this[_safeAddFirstEvent$0](sink);
        sink.close();
      }
      onCancel(sink) {
        EventSinkOfS().as(sink);
      }
      onListen(sink) {
        EventSinkOfS().as(sink);
        async.scheduleMicrotask(dart.fn(() => this[_safeAddFirstEvent$0](sink), T$.VoidTovoid()));
      }
      onPause(sink) {
        EventSinkOfS().as(sink);
      }
      onResume(sink) {
        EventSinkOfS().as(sink);
      }
      [_safeAddFirstEvent$0](sink) {
        if (!this[_isFirstEventAdded$0]) {
          sink.add(this[_startValue$]);
          this[_isFirstEventAdded$0] = true;
        }
      }
    }
    (_StartWithStreamSink.new = function(_startValue) {
      this[_isFirstEventAdded$0] = false;
      this[_startValue$] = _startValue;
      ;
    }).prototype = _StartWithStreamSink.prototype;
    dart.addTypeTests(_StartWithStreamSink);
    _StartWithStreamSink.prototype[_is__StartWithStreamSink_default] = true;
    dart.addTypeCaches(_StartWithStreamSink);
    _StartWithStreamSink[dart.implements] = () => [forwarding_sink.ForwardingSink$(S, S)];
    dart.setMethodSignature(_StartWithStreamSink, () => ({
      __proto__: dart.getMethods(_StartWithStreamSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [dart.nullable(core.Object), core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onCancel: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
      onListen: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onPause: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onResume: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [_safeAddFirstEvent$0]: dart.fnType(dart.void, [async.EventSink$(S)])
    }));
    dart.setLibraryUri(_StartWithStreamSink, I[21]);
    dart.setFieldSignature(_StartWithStreamSink, () => ({
      __proto__: dart.getFields(_StartWithStreamSink.__proto__),
      [_startValue$]: dart.finalFieldType(S),
      [_isFirstEventAdded$0]: dart.fieldType(core.bool)
    }));
    return _StartWithStreamSink;
  });
  start_with._StartWithStreamSink = start_with._StartWithStreamSink$();
  dart.addTypeTests(start_with._StartWithStreamSink, _is__StartWithStreamSink_default);
  var startValue$ = dart.privateName(start_with, "StartWithStreamTransformer.startValue");
  const _is_StartWithStreamTransformer_default = Symbol('_is_StartWithStreamTransformer_default');
  start_with.StartWithStreamTransformer$ = dart.generic(S => {
    var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
    var _StartWithStreamSinkOfS = () => (_StartWithStreamSinkOfS = dart.constFn(start_with._StartWithStreamSink$(S)))();
    class StartWithStreamTransformer extends async.StreamTransformerBase$(S, S) {
      get startValue() {
        return this[startValue$];
      }
      set startValue(value) {
        super.startValue = value;
      }
      bind(stream) {
        StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, S, stream, new (_StartWithStreamSinkOfS()).new(this.startValue));
      }
    }
    (StartWithStreamTransformer.new = function(startValue) {
      this[startValue$] = startValue;
      StartWithStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = StartWithStreamTransformer.prototype;
    dart.addTypeTests(StartWithStreamTransformer);
    StartWithStreamTransformer.prototype[_is_StartWithStreamTransformer_default] = true;
    dart.addTypeCaches(StartWithStreamTransformer);
    dart.setMethodSignature(StartWithStreamTransformer, () => ({
      __proto__: dart.getMethods(StartWithStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(S), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(StartWithStreamTransformer, I[21]);
    dart.setFieldSignature(StartWithStreamTransformer, () => ({
      __proto__: dart.getFields(StartWithStreamTransformer.__proto__),
      startValue: dart.finalFieldType(S)
    }));
    return StartWithStreamTransformer;
  });
  start_with.StartWithStreamTransformer = start_with.StartWithStreamTransformer$();
  dart.addTypeTests(start_with.StartWithStreamTransformer, _is_StartWithStreamTransformer_default);
  start_with['StartWithExtension|startWith'] = function StartWithExtension$124startWith(T, $this, startValue) {
    return $this.transform(T, new (start_with.StartWithStreamTransformer$(T)).new(startValue));
  };
  start_with['StartWithExtension|get#startWith'] = function StartWithExtension$124get$35startWith(T, $this) {
    return dart.fn(startValue => start_with['StartWithExtension|startWith'](T, $this, startValue), dart.fnType(async.Stream$(T), [T]));
  };
  var _stream$ = dart.privateName(behavior_subject, "_stream");
  var _wrapper$ = dart.privateName(behavior_subject, "_wrapper");
  var _forwardBehaviorSubject = dart.privateName(behavior_subject, "_forwardBehaviorSubject");
  const _is_BehaviorSubject_default = Symbol('_is_BehaviorSubject_default');
  behavior_subject.BehaviorSubject$ = dart.generic(T => {
    var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
    var StreamOfTToStreamOfT = () => (StreamOfTToStreamOfT = dart.constFn(dart.fnType(StreamOfT(), [StreamOfT()])))();
    class BehaviorSubject extends subject.Subject$(T) {
      static new(opts) {
        let onListen = opts && 'onListen' in opts ? opts.onListen : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        let sync = opts && 'sync' in opts ? opts.sync : false;
        let controller = async.StreamController$(T).broadcast({onListen: onListen, onCancel: onCancel, sync: sync});
        let wrapper = new (behavior_subject._Wrapper$(T)).new();
        return new (behavior_subject.BehaviorSubject$(T)).__(controller, rx.Rx.defer(T, behavior_subject.BehaviorSubject._deferStream(T, wrapper, controller, sync), {reusable: true}), wrapper);
      }
      static seeded(seedValue, opts) {
        let onListen = opts && 'onListen' in opts ? opts.onListen : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        let sync = opts && 'sync' in opts ? opts.sync : false;
        let controller = async.StreamController$(T).broadcast({onListen: onListen, onCancel: onCancel, sync: sync});
        let wrapper = new (behavior_subject._Wrapper$(T)).seeded(seedValue);
        return new (behavior_subject.BehaviorSubject$(T)).__(controller, rx.Rx.defer(T, behavior_subject.BehaviorSubject._deferStream(T, wrapper, controller, sync), {reusable: true}), wrapper);
      }
      static _deferStream(T, wrapper, controller, sync) {
        return dart.fn(() => {
          if (wrapper.latestErrorAndStackTrace != null) {
            let errorAndStackTrace = dart.nullCheck(wrapper.latestErrorAndStackTrace);
            return controller.stream.transform(T, new (start_with_error.StartWithErrorStreamTransformer$(T)).new(errorAndStackTrace.error, errorAndStackTrace.stackTrace));
          }
          if (wrapper.latestValue != null) {
            return controller.stream.transform(T, new (start_with.StartWithStreamTransformer$(T)).new(dart.nullCheck(wrapper.latestValue).value));
          }
          return controller.stream;
        }, dart.fnType(async.Stream$(T), []));
      }
      onAdd(event) {
        T.as(event);
        return this[_wrapper$].setValue(event);
      }
      onAddError(error, stackTrace = null) {
        return this[_wrapper$].setError(error, stackTrace);
      }
      get stream() {
        return this;
      }
      get valueWrapper() {
        return this[_wrapper$].latestValue;
      }
      get errorAndStackTrace() {
        return this[_wrapper$].latestErrorAndStackTrace;
      }
      createForwardingSubject(R, opts) {
        let onListen = opts && 'onListen' in opts ? opts.onListen : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        let sync = opts && 'sync' in opts ? opts.sync : false;
        return behavior_subject.BehaviorSubject$(R).new({onListen: onListen, onCancel: onCancel, sync: sync});
      }
      where(test) {
        return this[_forwardBehaviorSubject](T, dart.fn(s => s.where(test), StreamOfTToStreamOfT()));
      }
      map(S, convert) {
        return this[_forwardBehaviorSubject](S, dart.fn(s => s.map(S, convert), dart.fnType(async.Stream$(S), [StreamOfT()])));
      }
      asyncMap(E, convert) {
        return this[_forwardBehaviorSubject](E, dart.fn(s => s.asyncMap(E, convert), dart.fnType(async.Stream$(E), [StreamOfT()])));
      }
      asyncExpand(E, convert) {
        return this[_forwardBehaviorSubject](E, dart.fn(s => s.asyncExpand(E, convert), dart.fnType(async.Stream$(E), [StreamOfT()])));
      }
      handleError(onError, opts) {
        let test = opts && 'test' in opts ? opts.test : null;
        return this[_forwardBehaviorSubject](T, dart.fn(s => s.handleError(onError, {test: test}), StreamOfTToStreamOfT()));
      }
      expand(S, convert) {
        return this[_forwardBehaviorSubject](S, dart.fn(s => s.expand(S, convert), dart.fnType(async.Stream$(S), [StreamOfT()])));
      }
      transform(S, streamTransformer) {
        async.StreamTransformer$(T, S).as(streamTransformer);
        return this[_forwardBehaviorSubject](S, dart.fn(s => s.transform(S, streamTransformer), dart.fnType(async.Stream$(S), [StreamOfT()])));
      }
      cast(R) {
        return this[_forwardBehaviorSubject](R, dart.fn(s => s.cast(R), dart.fnType(async.Stream$(R), [StreamOfT()])));
      }
      take(count) {
        return this[_forwardBehaviorSubject](T, dart.fn(s => s.take(count), StreamOfTToStreamOfT()));
      }
      takeWhile(test) {
        return this[_forwardBehaviorSubject](T, dart.fn(s => s.takeWhile(test), StreamOfTToStreamOfT()));
      }
      skip(count) {
        return this[_forwardBehaviorSubject](T, dart.fn(s => s.skip(count), StreamOfTToStreamOfT()));
      }
      skipWhile(test) {
        return this[_forwardBehaviorSubject](T, dart.fn(s => s.skipWhile(test), StreamOfTToStreamOfT()));
      }
      distinct(equals = null) {
        return this[_forwardBehaviorSubject](T, dart.fn(s => s.distinct(equals), StreamOfTToStreamOfT()));
      }
      timeout(timeLimit, opts) {
        let onTimeout = opts && 'onTimeout' in opts ? opts.onTimeout : null;
        return this[_forwardBehaviorSubject](T, dart.fn(s => s.timeout(timeLimit, {onTimeout: onTimeout}), StreamOfTToStreamOfT()));
      }
      [_forwardBehaviorSubject](R, transformerStream) {
        let subject = null;
        function subject$35get() {
          let t126;
          t126 = subject;
          return t126 == null ? dart.throw(new _internal.LateError.localNI("subject")) : t126;
        }
        dart.fn(subject$35get, dart.fnType(behavior_subject.BehaviorSubject$(R), []));
        function subject$35set(t127) {
          return subject = t127;
        }
        dart.fn(subject$35set, dart.fnType(dart.dynamic, [behavior_subject.BehaviorSubject$(R)]));
        let subscription = null;
        function subscription$35get() {
          let t130;
          t130 = subscription;
          return t130 == null ? dart.throw(new _internal.LateError.localNI("subscription")) : t130;
        }
        dart.fn(subscription$35get, dart.fnType(async.StreamSubscription$(R), []));
        function subscription$35set(t131) {
          return subscription = t131;
        }
        dart.fn(subscription$35set, dart.fnType(dart.dynamic, [async.StreamSubscription$(R)]));
        let onListen = dart.fn(() => subscription$35set(transformerStream(this[_stream$]).listen(dart.bind(subject$35get(), 'add'), {onError: dart.bind(subject$35get(), 'addError'), onDone: dart.bind(subject$35get(), 'close')})), dart.fnType(async.StreamSubscription$(R), []));
        let onCancel = dart.fn(() => subscription$35get().cancel(), T$.VoidToFutureOfvoid());
        return subject$35set(this.createForwardingSubject(R, {onListen: onListen, onCancel: onCancel, sync: true}));
      }
    }
    (BehaviorSubject.__ = function(controller, _stream, _wrapper) {
      this[_stream$] = _stream;
      this[_wrapper$] = _wrapper;
      BehaviorSubject.__proto__.new.call(this, controller, _stream);
      ;
    }).prototype = BehaviorSubject.prototype;
    dart.addTypeTests(BehaviorSubject);
    BehaviorSubject.prototype[_is_BehaviorSubject_default] = true;
    dart.addTypeCaches(BehaviorSubject);
    BehaviorSubject[dart.implements] = () => [value_stream.ValueStream$(T)];
    dart.setMethodSignature(BehaviorSubject, () => ({
      __proto__: dart.getMethods(BehaviorSubject.__proto__),
      createForwardingSubject: dart.gFnType(R => [behavior_subject.BehaviorSubject$(R), [], {onCancel: dart.nullable(dart.fnType(dart.void, [])), onListen: dart.nullable(dart.fnType(dart.void, [])), sync: core.bool}, {}], R => [dart.nullable(core.Object)]),
      where: dart.fnType(value_stream.ValueStream$(T), [dart.fnType(core.bool, [T])]),
      map: dart.gFnType(S => [value_stream.ValueStream$(S), [dart.fnType(S, [T])]], S => [dart.nullable(core.Object)]),
      asyncMap: dart.gFnType(E => [value_stream.ValueStream$(E), [dart.fnType(async.FutureOr$(E), [T])]], E => [dart.nullable(core.Object)]),
      asyncExpand: dart.gFnType(E => [value_stream.ValueStream$(E), [dart.fnType(dart.nullable(async.Stream$(E)), [T])]], E => [dart.nullable(core.Object)]),
      handleError: dart.fnType(value_stream.ValueStream$(T), [core.Function], {test: dart.nullable(dart.fnType(core.bool, [dart.dynamic]))}, {}),
      expand: dart.gFnType(S => [value_stream.ValueStream$(S), [dart.fnType(core.Iterable$(S), [T])]], S => [dart.nullable(core.Object)]),
      transform: dart.gFnType(S => [value_stream.ValueStream$(S), [dart.nullable(core.Object)]], S => [dart.nullable(core.Object)]),
      cast: dart.gFnType(R => [value_stream.ValueStream$(R), []], R => [dart.nullable(core.Object)]),
      take: dart.fnType(value_stream.ValueStream$(T), [core.int]),
      takeWhile: dart.fnType(value_stream.ValueStream$(T), [dart.fnType(core.bool, [T])]),
      skip: dart.fnType(value_stream.ValueStream$(T), [core.int]),
      skipWhile: dart.fnType(value_stream.ValueStream$(T), [dart.fnType(core.bool, [T])]),
      distinct: dart.fnType(value_stream.ValueStream$(T), [], [dart.nullable(dart.fnType(core.bool, [T, T]))]),
      timeout: dart.fnType(value_stream.ValueStream$(T), [core.Duration], {onTimeout: dart.nullable(dart.fnType(dart.void, [async.EventSink$(T)]))}, {}),
      [_forwardBehaviorSubject]: dart.gFnType(R => [value_stream.ValueStream$(R), [dart.fnType(async.Stream$(R), [async.Stream$(T)])]], R => [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(BehaviorSubject, () => ({
      __proto__: dart.getGetters(BehaviorSubject.__proto__),
      stream: value_stream.ValueStream$(T),
      valueWrapper: dart.nullable(value_wrapper.ValueWrapper$(T)),
      errorAndStackTrace: dart.nullable(error_and_stacktrace.ErrorAndStackTrace)
    }));
    dart.setLibraryUri(BehaviorSubject, I[22]);
    dart.setFieldSignature(BehaviorSubject, () => ({
      __proto__: dart.getFields(BehaviorSubject.__proto__),
      [_wrapper$]: dart.finalFieldType(behavior_subject._Wrapper$(T)),
      [_stream$]: dart.finalFieldType(async.Stream$(T))
    }));
    return BehaviorSubject;
  });
  behavior_subject.BehaviorSubject = behavior_subject.BehaviorSubject$();
  dart.addTypeTests(behavior_subject.BehaviorSubject, _is_BehaviorSubject_default);
  var latestValue = dart.privateName(behavior_subject, "_Wrapper.latestValue");
  const _is__Wrapper_default = Symbol('_is__Wrapper_default');
  behavior_subject._Wrapper$ = dart.generic(T => {
    var ValueWrapperOfT = () => (ValueWrapperOfT = dart.constFn(value_wrapper.ValueWrapper$(T)))();
    var ValueWrapperNOfT = () => (ValueWrapperNOfT = dart.constFn(dart.nullable(ValueWrapperOfT())))();
    class _Wrapper extends core.Object {
      get latestValue() {
        return this[latestValue];
      }
      set latestValue(value) {
        this[latestValue] = ValueWrapperNOfT().as(value);
      }
      setValue(event) {
        T.as(event);
        this.latestValue = new (ValueWrapperOfT()).new(event);
        this.latestErrorAndStackTrace = null;
      }
      setError(error, stackTrace = null) {
        this.latestValue = null;
        this.latestErrorAndStackTrace = new error_and_stacktrace.ErrorAndStackTrace.new(error, stackTrace);
      }
    }
    (_Wrapper.new = function() {
      this.latestErrorAndStackTrace = null;
      this[latestValue] = null;
      ;
    }).prototype = _Wrapper.prototype;
    (_Wrapper.seeded = function(value) {
      this.latestErrorAndStackTrace = null;
      this[latestValue] = new (ValueWrapperOfT()).new(value);
      ;
    }).prototype = _Wrapper.prototype;
    dart.addTypeTests(_Wrapper);
    _Wrapper.prototype[_is__Wrapper_default] = true;
    dart.addTypeCaches(_Wrapper);
    dart.setMethodSignature(_Wrapper, () => ({
      __proto__: dart.getMethods(_Wrapper.__proto__),
      setValue: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      setError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)])
    }));
    dart.setLibraryUri(_Wrapper, I[22]);
    dart.setFieldSignature(_Wrapper, () => ({
      __proto__: dart.getFields(_Wrapper.__proto__),
      latestValue: dart.fieldType(dart.nullable(value_wrapper.ValueWrapper$(T))),
      latestErrorAndStackTrace: dart.fieldType(dart.nullable(error_and_stacktrace.ErrorAndStackTrace))
    }));
    return _Wrapper;
  });
  behavior_subject._Wrapper = behavior_subject._Wrapper$();
  dart.addTypeTests(behavior_subject._Wrapper, _is__Wrapper_default);
  const _is_ConnectableStream_default = Symbol('_is_ConnectableStream_default');
  connectable_stream.ConnectableStream$ = dart.generic(T => {
    class ConnectableStream extends async.StreamView$(T) {}
    (ConnectableStream.new = function(stream) {
      ConnectableStream.__proto__.new.call(this, stream);
      ;
    }).prototype = ConnectableStream.prototype;
    dart.addTypeTests(ConnectableStream);
    ConnectableStream.prototype[_is_ConnectableStream_default] = true;
    dart.addTypeCaches(ConnectableStream);
    dart.setLibraryUri(ConnectableStream, I[23]);
    return ConnectableStream;
  });
  connectable_stream.ConnectableStream = connectable_stream.ConnectableStream$();
  dart.addTypeTests(connectable_stream.ConnectableStream, _is_ConnectableStream_default);
  var _subject$ = dart.privateName(connectable_stream, "_subject");
  var _source$ = dart.privateName(connectable_stream, "_source");
  var _connect = dart.privateName(connectable_stream, "_connect");
  const _is_PublishConnectableStream_default = Symbol('_is_PublishConnectableStream_default');
  connectable_stream.PublishConnectableStream$ = dart.generic(T => {
    var StreamSubscriptionOfT = () => (StreamSubscriptionOfT = dart.constFn(async.StreamSubscription$(T)))();
    var StreamSubscriptionOfTTovoid = () => (StreamSubscriptionOfTTovoid = dart.constFn(dart.fnType(dart.void, [StreamSubscriptionOfT()])))();
    var ConnectableStreamSubscriptionOfT = () => (ConnectableStreamSubscriptionOfT = dart.constFn(connectable_stream.ConnectableStreamSubscription$(T)))();
    var VoidToConnectableStreamSubscriptionOfT = () => (VoidToConnectableStreamSubscriptionOfT = dart.constFn(dart.fnType(ConnectableStreamSubscriptionOfT(), [])))();
    var ConnectableStreamSubscriptionOfTTodynamic = () => (ConnectableStreamSubscriptionOfTTodynamic = dart.constFn(dart.fnType(dart.dynamic, [ConnectableStreamSubscriptionOfT()])))();
    class PublishConnectableStream extends connectable_stream.ConnectableStream$(T) {
      static new(source, opts) {
        let sync = opts && 'sync' in opts ? opts.sync : false;
        return new (connectable_stream.PublishConnectableStream$(T)).__(source, publish_subject.PublishSubject$(T).new({sync: sync}));
      }
      [_connect]() {
        return new (ConnectableStreamSubscriptionOfT()).new(this[_source$].listen(dart.bind(this[_subject$], 'add'), {onError: dart.bind(this[_subject$], 'addError'), onDone: dart.bind(this[_subject$], 'close')}), this[_subject$]);
      }
      autoConnect(opts) {
        let connection = opts && 'connection' in opts ? opts.connection : null;
        this[_subject$].onListen = dart.fn(() => {
          let t133;
          let subscription = this[_connect]();
          t133 = connection;
          t133 == null ? null : t133(subscription);
        }, T$.VoidTovoid());
        this[_subject$].onCancel = null;
        return this[_subject$];
      }
      connect() {
        this[_subject$].onListen = this[_subject$].onCancel = null;
        return this[_connect]();
      }
      refCount() {
        let subscription = null;
        function subscription$35get() {
          let t134;
          t134 = subscription;
          return t134 == null ? dart.throw(new _internal.LateError.localNI("subscription")) : t134;
        }
        dart.fn(subscription$35get, VoidToConnectableStreamSubscriptionOfT());
        function subscription$35set(t135) {
          return subscription = t135;
        }
        dart.fn(subscription$35set, ConnectableStreamSubscriptionOfTTodynamic());
        this[_subject$].onListen = dart.fn(() => subscription$35set(this[_connect]()), T$.VoidTovoid());
        this[_subject$].onCancel = dart.fn(() => subscription$35get().cancel(), T$.VoidTovoid());
        return this[_subject$];
      }
    }
    (PublishConnectableStream.__ = function(source, _subject) {
      this[_subject$] = _subject;
      this[_source$] = source.isBroadcast ? source : source.asBroadcastStream({onCancel: dart.fn(s => s.cancel(), StreamSubscriptionOfTTovoid())});
      PublishConnectableStream.__proto__.new.call(this, _subject);
      ;
    }).prototype = PublishConnectableStream.prototype;
    dart.addTypeTests(PublishConnectableStream);
    PublishConnectableStream.prototype[_is_PublishConnectableStream_default] = true;
    dart.addTypeCaches(PublishConnectableStream);
    dart.setMethodSignature(PublishConnectableStream, () => ({
      __proto__: dart.getMethods(PublishConnectableStream.__proto__),
      [_connect]: dart.fnType(connectable_stream.ConnectableStreamSubscription$(T), []),
      autoConnect: dart.fnType(async.Stream$(T), [], {connection: dart.nullable(dart.fnType(dart.void, [async.StreamSubscription$(T)]))}, {}),
      connect: dart.fnType(async.StreamSubscription$(T), []),
      refCount: dart.fnType(async.Stream$(T), [])
    }));
    dart.setLibraryUri(PublishConnectableStream, I[23]);
    dart.setFieldSignature(PublishConnectableStream, () => ({
      __proto__: dart.getFields(PublishConnectableStream.__proto__),
      [_source$]: dart.finalFieldType(async.Stream$(T)),
      [_subject$]: dart.finalFieldType(publish_subject.PublishSubject$(T))
    }));
    return PublishConnectableStream;
  });
  connectable_stream.PublishConnectableStream = connectable_stream.PublishConnectableStream$();
  dart.addTypeTests(connectable_stream.PublishConnectableStream, _is_PublishConnectableStream_default);
  const _is_ValueConnectableStream_default = Symbol('_is_ValueConnectableStream_default');
  connectable_stream.ValueConnectableStream$ = dart.generic(T => {
    var StreamSubscriptionOfT = () => (StreamSubscriptionOfT = dart.constFn(async.StreamSubscription$(T)))();
    var StreamSubscriptionOfTTovoid = () => (StreamSubscriptionOfTTovoid = dart.constFn(dart.fnType(dart.void, [StreamSubscriptionOfT()])))();
    var ConnectableStreamSubscriptionOfT = () => (ConnectableStreamSubscriptionOfT = dart.constFn(connectable_stream.ConnectableStreamSubscription$(T)))();
    var VoidToConnectableStreamSubscriptionOfT = () => (VoidToConnectableStreamSubscriptionOfT = dart.constFn(dart.fnType(ConnectableStreamSubscriptionOfT(), [])))();
    var ConnectableStreamSubscriptionOfTTodynamic = () => (ConnectableStreamSubscriptionOfTTodynamic = dart.constFn(dart.fnType(dart.dynamic, [ConnectableStreamSubscriptionOfT()])))();
    class ValueConnectableStream extends connectable_stream.ConnectableStream$(T) {
      static new(source, opts) {
        let sync = opts && 'sync' in opts ? opts.sync : false;
        return new (connectable_stream.ValueConnectableStream$(T)).__(source, behavior_subject.BehaviorSubject$(T).new({sync: sync}));
      }
      static seeded(source, seedValue, opts) {
        let sync = opts && 'sync' in opts ? opts.sync : false;
        return new (connectable_stream.ValueConnectableStream$(T)).__(source, behavior_subject.BehaviorSubject$(T).seeded(seedValue, {sync: sync}));
      }
      [_connect]() {
        return new (ConnectableStreamSubscriptionOfT()).new(this[_source$].listen(dart.bind(this[_subject$], 'add'), {onError: dart.bind(this[_subject$], 'addError'), onDone: dart.bind(this[_subject$], 'close')}), this[_subject$]);
      }
      autoConnect(opts) {
        let connection = opts && 'connection' in opts ? opts.connection : null;
        this[_subject$].onListen = dart.fn(() => {
          let t137;
          let subscription = this[_connect]();
          t137 = connection;
          t137 == null ? null : t137(subscription);
        }, T$.VoidTovoid());
        this[_subject$].onCancel = null;
        return this[_subject$];
      }
      connect() {
        this[_subject$].onListen = this[_subject$].onCancel = null;
        return this[_connect]();
      }
      refCount() {
        let subscription = null;
        function subscription$35get() {
          let t138;
          t138 = subscription;
          return t138 == null ? dart.throw(new _internal.LateError.localNI("subscription")) : t138;
        }
        dart.fn(subscription$35get, VoidToConnectableStreamSubscriptionOfT());
        function subscription$35set(t139) {
          return subscription = t139;
        }
        dart.fn(subscription$35set, ConnectableStreamSubscriptionOfTTodynamic());
        this[_subject$].onListen = dart.fn(() => subscription$35set(this[_connect]()), T$.VoidTovoid());
        this[_subject$].onCancel = dart.fn(() => subscription$35get().cancel(), T$.VoidTovoid());
        return this[_subject$];
      }
      get errorAndStackTrace() {
        return this[_subject$].errorAndStackTrace;
      }
      get valueWrapper() {
        return this[_subject$].valueWrapper;
      }
    }
    (ValueConnectableStream.__ = function(source, _subject) {
      this[_subject$] = _subject;
      this[_source$] = source.isBroadcast ? source : source.asBroadcastStream({onCancel: dart.fn(s => s.cancel(), StreamSubscriptionOfTTovoid())});
      ValueConnectableStream.__proto__.new.call(this, _subject);
      ;
    }).prototype = ValueConnectableStream.prototype;
    dart.addTypeTests(ValueConnectableStream);
    ValueConnectableStream.prototype[_is_ValueConnectableStream_default] = true;
    dart.addTypeCaches(ValueConnectableStream);
    ValueConnectableStream[dart.implements] = () => [value_stream.ValueStream$(T)];
    dart.setMethodSignature(ValueConnectableStream, () => ({
      __proto__: dart.getMethods(ValueConnectableStream.__proto__),
      [_connect]: dart.fnType(connectable_stream.ConnectableStreamSubscription$(T), []),
      autoConnect: dart.fnType(value_stream.ValueStream$(T), [], {connection: dart.nullable(dart.fnType(dart.void, [async.StreamSubscription$(T)]))}, {}),
      connect: dart.fnType(async.StreamSubscription$(T), []),
      refCount: dart.fnType(value_stream.ValueStream$(T), [])
    }));
    dart.setGetterSignature(ValueConnectableStream, () => ({
      __proto__: dart.getGetters(ValueConnectableStream.__proto__),
      errorAndStackTrace: dart.nullable(error_and_stacktrace.ErrorAndStackTrace),
      valueWrapper: dart.nullable(value_wrapper.ValueWrapper$(T))
    }));
    dart.setLibraryUri(ValueConnectableStream, I[23]);
    dart.setFieldSignature(ValueConnectableStream, () => ({
      __proto__: dart.getFields(ValueConnectableStream.__proto__),
      [_source$]: dart.finalFieldType(async.Stream$(T)),
      [_subject$]: dart.finalFieldType(behavior_subject.BehaviorSubject$(T))
    }));
    return ValueConnectableStream;
  });
  connectable_stream.ValueConnectableStream = connectable_stream.ValueConnectableStream$();
  dart.addTypeTests(connectable_stream.ValueConnectableStream, _is_ValueConnectableStream_default);
  const _is_ReplayConnectableStream_default = Symbol('_is_ReplayConnectableStream_default');
  connectable_stream.ReplayConnectableStream$ = dart.generic(T => {
    var StreamSubscriptionOfT = () => (StreamSubscriptionOfT = dart.constFn(async.StreamSubscription$(T)))();
    var StreamSubscriptionOfTTovoid = () => (StreamSubscriptionOfTTovoid = dart.constFn(dart.fnType(dart.void, [StreamSubscriptionOfT()])))();
    var ConnectableStreamSubscriptionOfT = () => (ConnectableStreamSubscriptionOfT = dart.constFn(connectable_stream.ConnectableStreamSubscription$(T)))();
    var VoidToConnectableStreamSubscriptionOfT = () => (VoidToConnectableStreamSubscriptionOfT = dart.constFn(dart.fnType(ConnectableStreamSubscriptionOfT(), [])))();
    var ConnectableStreamSubscriptionOfTTodynamic = () => (ConnectableStreamSubscriptionOfTTodynamic = dart.constFn(dart.fnType(dart.dynamic, [ConnectableStreamSubscriptionOfT()])))();
    class ReplayConnectableStream extends connectable_stream.ConnectableStream$(T) {
      static new(stream, opts) {
        let maxSize = opts && 'maxSize' in opts ? opts.maxSize : null;
        let sync = opts && 'sync' in opts ? opts.sync : false;
        return new (connectable_stream.ReplayConnectableStream$(T)).__(stream, replay_subject.ReplaySubject$(T).new({maxSize: maxSize, sync: sync}));
      }
      [_connect]() {
        return new (ConnectableStreamSubscriptionOfT()).new(this[_source$].listen(dart.bind(this[_subject$], 'add'), {onError: dart.bind(this[_subject$], 'addError'), onDone: dart.bind(this[_subject$], 'close')}), this[_subject$]);
      }
      autoConnect(opts) {
        let connection = opts && 'connection' in opts ? opts.connection : null;
        this[_subject$].onListen = dart.fn(() => {
          let t141;
          let subscription = this[_connect]();
          t141 = connection;
          t141 == null ? null : t141(subscription);
        }, T$.VoidTovoid());
        this[_subject$].onCancel = null;
        return this[_subject$];
      }
      connect() {
        this[_subject$].onListen = this[_subject$].onCancel = null;
        return this[_connect]();
      }
      refCount() {
        let subscription = null;
        function subscription$35get() {
          let t142;
          t142 = subscription;
          return t142 == null ? dart.throw(new _internal.LateError.localNI("subscription")) : t142;
        }
        dart.fn(subscription$35get, VoidToConnectableStreamSubscriptionOfT());
        function subscription$35set(t143) {
          return subscription = t143;
        }
        dart.fn(subscription$35set, ConnectableStreamSubscriptionOfTTodynamic());
        this[_subject$].onListen = dart.fn(() => subscription$35set(this[_connect]()), T$.VoidTovoid());
        this[_subject$].onCancel = dart.fn(() => subscription$35get().cancel(), T$.VoidTovoid());
        return this[_subject$];
      }
      get values() {
        return this[_subject$].values;
      }
      get errorAndStackTraces() {
        return this[_subject$].errorAndStackTraces;
      }
    }
    (ReplayConnectableStream.__ = function(source, _subject) {
      this[_subject$] = _subject;
      this[_source$] = source.isBroadcast ? source : source.asBroadcastStream({onCancel: dart.fn(s => s.cancel(), StreamSubscriptionOfTTovoid())});
      ReplayConnectableStream.__proto__.new.call(this, _subject);
      ;
    }).prototype = ReplayConnectableStream.prototype;
    dart.addTypeTests(ReplayConnectableStream);
    ReplayConnectableStream.prototype[_is_ReplayConnectableStream_default] = true;
    dart.addTypeCaches(ReplayConnectableStream);
    ReplayConnectableStream[dart.implements] = () => [replay_stream.ReplayStream$(T)];
    dart.setMethodSignature(ReplayConnectableStream, () => ({
      __proto__: dart.getMethods(ReplayConnectableStream.__proto__),
      [_connect]: dart.fnType(connectable_stream.ConnectableStreamSubscription$(T), []),
      autoConnect: dart.fnType(replay_stream.ReplayStream$(T), [], {connection: dart.nullable(dart.fnType(dart.void, [async.StreamSubscription$(T)]))}, {}),
      connect: dart.fnType(async.StreamSubscription$(T), []),
      refCount: dart.fnType(replay_stream.ReplayStream$(T), [])
    }));
    dart.setGetterSignature(ReplayConnectableStream, () => ({
      __proto__: dart.getGetters(ReplayConnectableStream.__proto__),
      values: core.List$(T),
      errorAndStackTraces: core.List$(error_and_stacktrace.ErrorAndStackTrace)
    }));
    dart.setLibraryUri(ReplayConnectableStream, I[23]);
    dart.setFieldSignature(ReplayConnectableStream, () => ({
      __proto__: dart.getFields(ReplayConnectableStream.__proto__),
      [_source$]: dart.finalFieldType(async.Stream$(T)),
      [_subject$]: dart.finalFieldType(replay_subject.ReplaySubject$(T))
    }));
    return ReplayConnectableStream;
  });
  connectable_stream.ReplayConnectableStream = connectable_stream.ReplayConnectableStream$();
  dart.addTypeTests(connectable_stream.ReplayConnectableStream, _is_ReplayConnectableStream_default);
  const _is_ConnectableStreamSubscription_default = Symbol('_is_ConnectableStreamSubscription_default');
  connectable_stream.ConnectableStreamSubscription$ = dart.generic(T => {
    class ConnectableStreamSubscription extends async.StreamSubscription$(T) {
      cancel() {
        return this[_source$].cancel().then(dart.void, dart.fn(_ => this[_subject$].close(), T$.voidToFuture()));
      }
      asFuture(E, futureValue = null) {
        return this[_source$].asFuture(E, futureValue);
      }
      get isPaused() {
        return this[_source$].isPaused;
      }
      onData(handleData) {
        return this[_source$].onData(handleData);
      }
      onDone(handleDone) {
        return this[_source$].onDone(handleDone);
      }
      onError(handleError) {
        return this[_source$].onError(handleError);
      }
      pause(resumeSignal = null) {
        return this[_source$].pause(resumeSignal);
      }
      resume() {
        return this[_source$].resume();
      }
    }
    (ConnectableStreamSubscription.new = function(_source, _subject) {
      this[_source$] = _source;
      this[_subject$] = _subject;
      ;
    }).prototype = ConnectableStreamSubscription.prototype;
    dart.addTypeTests(ConnectableStreamSubscription);
    ConnectableStreamSubscription.prototype[_is_ConnectableStreamSubscription_default] = true;
    dart.addTypeCaches(ConnectableStreamSubscription);
    dart.setMethodSignature(ConnectableStreamSubscription, () => ({
      __proto__: dart.getMethods(ConnectableStreamSubscription.__proto__),
      cancel: dart.fnType(async.Future, []),
      asFuture: dart.gFnType(E => [async.Future$(E), [], [dart.nullable(E)]], E => [dart.nullable(core.Object)]),
      onData: dart.fnType(dart.void, [dart.nullable(dart.fnType(dart.void, [T]))]),
      onDone: dart.fnType(dart.void, [dart.nullable(dart.fnType(dart.void, []))]),
      onError: dart.fnType(dart.void, [dart.nullable(core.Function)]),
      pause: dart.fnType(dart.void, [], [dart.nullable(async.Future$(dart.void))]),
      resume: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(ConnectableStreamSubscription, () => ({
      __proto__: dart.getGetters(ConnectableStreamSubscription.__proto__),
      isPaused: core.bool
    }));
    dart.setLibraryUri(ConnectableStreamSubscription, I[23]);
    dart.setFieldSignature(ConnectableStreamSubscription, () => ({
      __proto__: dart.getFields(ConnectableStreamSubscription.__proto__),
      [_source$]: dart.finalFieldType(async.StreamSubscription$(T)),
      [_subject$]: dart.finalFieldType(subject.Subject$(T))
    }));
    return ConnectableStreamSubscription;
  });
  connectable_stream.ConnectableStreamSubscription = connectable_stream.ConnectableStreamSubscription$();
  dart.addTypeTests(connectable_stream.ConnectableStreamSubscription, _is_ConnectableStreamSubscription_default);
  connectable_stream['ConnectableStreamExtensions|publish'] = function ConnectableStreamExtensions$124publish(T, $this) {
    return connectable_stream.PublishConnectableStream$(T).new($this, {sync: true});
  };
  connectable_stream['ConnectableStreamExtensions|get#publish'] = function ConnectableStreamExtensions$124get$35publish(T, $this) {
    return dart.fn(() => connectable_stream['ConnectableStreamExtensions|publish'](T, $this), dart.fnType(connectable_stream.ConnectableStream$(T), []));
  };
  connectable_stream['ConnectableStreamExtensions|publishValue'] = function ConnectableStreamExtensions$124publishValue(T, $this) {
    return connectable_stream.ValueConnectableStream$(T).new($this, {sync: true});
  };
  connectable_stream['ConnectableStreamExtensions|get#publishValue'] = function ConnectableStreamExtensions$124get$35publishValue(T, $this) {
    return dart.fn(() => connectable_stream['ConnectableStreamExtensions|publishValue'](T, $this), dart.fnType(connectable_stream.ValueConnectableStream$(T), []));
  };
  connectable_stream['ConnectableStreamExtensions|publishValueSeeded'] = function ConnectableStreamExtensions$124publishValueSeeded(T, $this, seedValue) {
    return connectable_stream.ValueConnectableStream$(T).seeded($this, seedValue, {sync: true});
  };
  connectable_stream['ConnectableStreamExtensions|get#publishValueSeeded'] = function ConnectableStreamExtensions$124get$35publishValueSeeded(T, $this) {
    return dart.fn(seedValue => connectable_stream['ConnectableStreamExtensions|publishValueSeeded'](T, $this, seedValue), dart.fnType(connectable_stream.ValueConnectableStream$(T), [T]));
  };
  connectable_stream['ConnectableStreamExtensions|publishReplay'] = function ConnectableStreamExtensions$124publishReplay(T, $this, opts) {
    let maxSize = opts && 'maxSize' in opts ? opts.maxSize : null;
    return connectable_stream.ReplayConnectableStream$(T).new($this, {maxSize: maxSize, sync: true});
  };
  connectable_stream['ConnectableStreamExtensions|get#publishReplay'] = function ConnectableStreamExtensions$124get$35publishReplay(T, $this) {
    return dart.fn(opts => {
      let maxSize = opts && 'maxSize' in opts ? opts.maxSize : null;
      return connectable_stream['ConnectableStreamExtensions|publishReplay'](T, $this, {maxSize: maxSize});
    }, dart.fnType(connectable_stream.ReplayConnectableStream$(T), [], {maxSize: T$.intN()}, {}));
  };
  connectable_stream['ConnectableStreamExtensions|share'] = function ConnectableStreamExtensions$124share(T, $this) {
    return connectable_stream['ConnectableStreamExtensions|publish'](T, $this).refCount();
  };
  connectable_stream['ConnectableStreamExtensions|get#share'] = function ConnectableStreamExtensions$124get$35share(T, $this) {
    return dart.fn(() => connectable_stream['ConnectableStreamExtensions|share'](T, $this), dart.fnType(async.Stream$(T), []));
  };
  connectable_stream['ConnectableStreamExtensions|shareValue'] = function ConnectableStreamExtensions$124shareValue(T, $this) {
    return connectable_stream['ConnectableStreamExtensions|publishValue'](T, $this).refCount();
  };
  connectable_stream['ConnectableStreamExtensions|get#shareValue'] = function ConnectableStreamExtensions$124get$35shareValue(T, $this) {
    return dart.fn(() => connectable_stream['ConnectableStreamExtensions|shareValue'](T, $this), dart.fnType(value_stream.ValueStream$(T), []));
  };
  connectable_stream['ConnectableStreamExtensions|shareValueSeeded'] = function ConnectableStreamExtensions$124shareValueSeeded(T, $this, seedValue) {
    return connectable_stream['ConnectableStreamExtensions|publishValueSeeded'](T, $this, seedValue).refCount();
  };
  connectable_stream['ConnectableStreamExtensions|get#shareValueSeeded'] = function ConnectableStreamExtensions$124get$35shareValueSeeded(T, $this) {
    return dart.fn(seedValue => connectable_stream['ConnectableStreamExtensions|shareValueSeeded'](T, $this, seedValue), dart.fnType(value_stream.ValueStream$(T), [T]));
  };
  connectable_stream['ConnectableStreamExtensions|shareReplay'] = function ConnectableStreamExtensions$124shareReplay(T, $this, opts) {
    let maxSize = opts && 'maxSize' in opts ? opts.maxSize : null;
    return connectable_stream['ConnectableStreamExtensions|publishReplay'](T, $this, {maxSize: maxSize}).refCount();
  };
  connectable_stream['ConnectableStreamExtensions|get#shareReplay'] = function ConnectableStreamExtensions$124get$35shareReplay(T, $this) {
    return dart.fn(opts => {
      let maxSize = opts && 'maxSize' in opts ? opts.maxSize : null;
      return connectable_stream['ConnectableStreamExtensions|shareReplay'](T, $this, {maxSize: maxSize});
    }, dart.fnType(replay_stream.ReplayStream$(T), [], {maxSize: T$.intN()}, {}));
  };
  rx.Rx = class Rx extends core.Object {
    static combineLatest(T, R, streams, combiner) {
      return new (combine_latest.CombineLatestStream$(T, R)).new(streams, combiner);
    }
    static combineLatestList(T, streams) {
      return combine_latest.CombineLatestStream.list(T, streams);
    }
    static combineLatest2(A, B, T, streamA, streamB, combiner) {
      return combine_latest.CombineLatestStream.combine2(A, B, T, streamA, streamB, combiner);
    }
    static combineLatest3(A, B, C, T, streamA, streamB, streamC, combiner) {
      return combine_latest.CombineLatestStream.combine3(A, B, C, T, streamA, streamB, streamC, combiner);
    }
    static combineLatest4(A, B, C, D, T, streamA, streamB, streamC, streamD, combiner) {
      return combine_latest.CombineLatestStream.combine4(A, B, C, D, T, streamA, streamB, streamC, streamD, combiner);
    }
    static combineLatest5(A, B, C, D, E, T, streamA, streamB, streamC, streamD, streamE, combiner) {
      return combine_latest.CombineLatestStream.combine5(A, B, C, D, E, T, streamA, streamB, streamC, streamD, streamE, combiner);
    }
    static combineLatest6(A, B, C, D, E, F, T, streamA, streamB, streamC, streamD, streamE, streamF, combiner) {
      return combine_latest.CombineLatestStream.combine6(A, B, C, D, E, F, T, streamA, streamB, streamC, streamD, streamE, streamF, combiner);
    }
    static combineLatest7(A, B, C, D, E, F, G, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, combiner) {
      return combine_latest.CombineLatestStream.combine7(A, B, C, D, E, F, G, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, combiner);
    }
    static combineLatest8(A, B, C, D, E, F, G, H, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, combiner) {
      return combine_latest.CombineLatestStream.combine8(A, B, C, D, E, F, G, H, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, combiner);
    }
    static combineLatest9(A, B, C, D, E, F, G, H, I, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, combiner) {
      return combine_latest.CombineLatestStream.combine9(A, B, C, D, E, F, G, H, I, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, combiner);
    }
    static concat(T, streams) {
      return new (concat.ConcatStream$(T)).new(streams);
    }
    static concatEager(T, streams) {
      return new (concat_eager.ConcatEagerStream$(T)).new(streams);
    }
    static defer(T, streamFactory, opts) {
      let reusable = opts && 'reusable' in opts ? opts.reusable : false;
      return new (defer.DeferStream$(T)).new(streamFactory, {reusable: reusable});
    }
    static forkJoin(T, R, streams, combiner) {
      return new (fork_join.ForkJoinStream$(T, R)).new(streams, combiner);
    }
    static forkJoinList(T, streams) {
      return fork_join.ForkJoinStream.list(T, streams);
    }
    static forkJoin2(A, B, T, streamA, streamB, combiner) {
      return fork_join.ForkJoinStream.combine2(A, B, T, streamA, streamB, combiner);
    }
    static forkJoin3(A, B, C, T, streamA, streamB, streamC, combiner) {
      return fork_join.ForkJoinStream.combine3(A, B, C, T, streamA, streamB, streamC, combiner);
    }
    static forkJoin4(A, B, C, D, T, streamA, streamB, streamC, streamD, combiner) {
      return fork_join.ForkJoinStream.combine4(A, B, C, D, T, streamA, streamB, streamC, streamD, combiner);
    }
    static forkJoin5(A, B, C, D, E, T, streamA, streamB, streamC, streamD, streamE, combiner) {
      return fork_join.ForkJoinStream.combine5(A, B, C, D, E, T, streamA, streamB, streamC, streamD, streamE, combiner);
    }
    static forkJoin6(A, B, C, D, E, F, T, streamA, streamB, streamC, streamD, streamE, streamF, combiner) {
      return fork_join.ForkJoinStream.combine6(A, B, C, D, E, F, T, streamA, streamB, streamC, streamD, streamE, streamF, combiner);
    }
    static forkJoin7(A, B, C, D, E, F, G, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, combiner) {
      return fork_join.ForkJoinStream.combine7(A, B, C, D, E, F, G, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, combiner);
    }
    static forkJoin8(A, B, C, D, E, F, G, H, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, combiner) {
      return fork_join.ForkJoinStream.combine8(A, B, C, D, E, F, G, H, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, combiner);
    }
    static forkJoin9(A, B, C, D, E, F, G, H, I, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, combiner) {
      return fork_join.ForkJoinStream.combine9(A, B, C, D, E, F, G, H, I, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, combiner);
    }
    static fromCallable(T, callable, opts) {
      let reusable = opts && 'reusable' in opts ? opts.reusable : false;
      return new (from_callable.FromCallableStream$(T)).new(callable, {reusable: reusable});
    }
    static merge(T, streams) {
      return new (merge.MergeStream$(T)).new(streams);
    }
    static never(T) {
      return new (never.NeverStream$(T)).new();
    }
    static race(T, streams) {
      return new (race.RaceStream$(T)).new(streams);
    }
    static range(startInclusive, endInclusive) {
      return new range.RangeStream.new(startInclusive, endInclusive);
    }
    static repeat(T, streamFactory, count = null) {
      return new (repeat.RepeatStream$(T)).new(streamFactory, count);
    }
    static retry(T, streamFactory, count = null) {
      return new (retry.RetryStream$(T)).new(streamFactory, count);
    }
    static retryWhen(T, streamFactory, retryWhenFactory) {
      return new (retry_when.RetryWhenStream$(T)).new(streamFactory, retryWhenFactory);
    }
    static sequenceEqual(A, B, stream, other, opts) {
      let equals = opts && 'equals' in opts ? opts.equals : null;
      let errorEquals = opts && 'errorEquals' in opts ? opts.errorEquals : null;
      return new (sequence_equal.SequenceEqualStream$(A, B)).new(stream, other, {dataEquals: equals, errorEquals: errorEquals});
    }
    static switchLatest(T, streams) {
      return new (switch_latest.SwitchLatestStream$(T)).new(streams);
    }
    static timer(T, value, duration) {
      return new (timer.TimerStream$(T)).new(value, duration);
    }
    static using(T, R, resourceFactory, streamFactory, disposer) {
      return new (using.UsingStream$(T, R)).new(resourceFactory, streamFactory, disposer);
    }
    static zip2(A, B, T, streamA, streamB, zipper) {
      return zip.ZipStream.zip2(A, B, T, streamA, streamB, zipper);
    }
    static zip(T, R, streams, zipper) {
      return new (zip.ZipStream$(T, R)).new(streams, zipper);
    }
    static zipList(T, streams) {
      return zip.ZipStream.list(T, streams);
    }
    static zip3(A, B, C, T, streamA, streamB, streamC, zipper) {
      return zip.ZipStream.zip3(A, B, C, T, streamA, streamB, streamC, zipper);
    }
    static zip4(A, B, C, D, T, streamA, streamB, streamC, streamD, zipper) {
      return zip.ZipStream.zip4(A, B, C, D, T, streamA, streamB, streamC, streamD, zipper);
    }
    static zip5(A, B, C, D, E, T, streamA, streamB, streamC, streamD, streamE, zipper) {
      return zip.ZipStream.zip5(A, B, C, D, E, T, streamA, streamB, streamC, streamD, streamE, zipper);
    }
    static zip6(A, B, C, D, E, F, T, streamA, streamB, streamC, streamD, streamE, streamF, zipper) {
      return zip.ZipStream.zip6(A, B, C, D, E, F, T, streamA, streamB, streamC, streamD, streamE, streamF, zipper);
    }
    static zip7(A, B, C, D, E, F, G, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, zipper) {
      return zip.ZipStream.zip7(A, B, C, D, E, F, G, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, zipper);
    }
    static zip8(A, B, C, D, E, F, G, H, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, zipper) {
      return zip.ZipStream.zip8(A, B, C, D, E, F, G, H, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, zipper);
    }
    static zip9(A, B, C, D, E, F, G, H, I, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, zipper) {
      return zip.ZipStream.zip9(A, B, C, D, E, F, G, H, I, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, zipper);
    }
  };
  (rx.Rx.new = function() {
    ;
  }).prototype = rx.Rx.prototype;
  dart.addTypeTests(rx.Rx);
  dart.addTypeCaches(rx.Rx);
  dart.setLibraryUri(rx.Rx, I[24]);
  dart.trackLibraries("packages/rxdart/src/transformers/with_latest_from.dart", {
    "package:rxdart/src/transformers/with_latest_from.dart": with_latest_from,
    "package:rxdart/src/transformers/time_interval.dart": time_interval,
    "package:rxdart/src/transformers/take_until.dart": take_until,
    "package:rxdart/src/transformers/take_last.dart": take_last,
    "package:rxdart/src/transformers/switch_map.dart": switch_map,
    "package:rxdart/src/transformers/switch_if_empty.dart": switch_if_empty,
    "package:rxdart/src/transformers/start_with_many.dart": start_with_many,
    "package:rxdart/src/transformers/skip_until.dart": skip_until,
    "package:rxdart/src/transformers/on_error_resume.dart": on_error_resume,
    "package:rxdart/src/transformers/flat_map.dart": flat_map,
    "package:rxdart/src/transformers/exhaust_map.dart": exhaust_map,
    "package:rxdart/src/transformers/do.dart": $do,
    "package:rxdart/src/transformers/backpressure/window.dart": window$,
    "package:rxdart/src/transformers/backpressure/throttle.dart": throttle,
    "package:rxdart/src/transformers/backpressure/sample.dart": sample,
    "package:rxdart/src/transformers/backpressure/pairwise.dart": pairwise,
    "package:rxdart/src/transformers/backpressure/debounce.dart": debounce,
    "package:rxdart/src/transformers/backpressure/backpressure.dart": backpressure,
    "package:rxdart/src/transformers/backpressure/buffer.dart": buffer,
    "package:rxdart/transformers.dart": transformers,
    "package:rxdart/src/subjects/replay_subject.dart": replay_subject,
    "package:rxdart/src/transformers/start_with_error.dart": start_with_error,
    "package:rxdart/src/utils/forwarding_stream.dart": forwarding_stream,
    "package:rxdart/src/transformers/start_with.dart": start_with,
    "package:rxdart/src/subjects/behavior_subject.dart": behavior_subject,
    "package:rxdart/subjects.dart": subjects,
    "package:rxdart/src/streams/connectable_stream.dart": connectable_stream,
    "package:rxdart/streams.dart": streams,
    "package:rxdart/src/rx.dart": rx,
    "package:rxdart/rxdart.dart": rxdart
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["with_latest_from.dart","time_interval.dart","take_until.dart","take_last.dart","switch_map.dart","switch_if_empty.dart","start_with_many.dart","skip_until.dart","on_error_resume.dart","flat_map.dart","exhaust_map.dart","do.dart","backpressure/backpressure.dart","backpressure/window.dart","backpressure/throttle.dart","backpressure/sample.dart","backpressure/pairwise.dart","backpressure/debounce.dart","backpressure/buffer.dart","../subjects/replay_subject.dart","start_with_error.dart","../utils/forwarding_stream.dart","start_with.dart","../subjects/behavior_subject.dart","../streams/connectable_stream.dart","../rx.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../packages/rxdart/src/transformers/with_latest_from.dart.lib.js"}');
  // Exports:
  return {
    src__transformers__with_latest_from: with_latest_from,
    src__transformers__time_interval: time_interval,
    src__transformers__take_until: take_until,
    src__transformers__take_last: take_last,
    src__transformers__switch_map: switch_map,
    src__transformers__switch_if_empty: switch_if_empty,
    src__transformers__start_with_many: start_with_many,
    src__transformers__skip_until: skip_until,
    src__transformers__on_error_resume: on_error_resume,
    src__transformers__flat_map: flat_map,
    src__transformers__exhaust_map: exhaust_map,
    src__transformers__do: $do,
    src__transformers__backpressure__window: window$,
    src__transformers__backpressure__throttle: throttle,
    src__transformers__backpressure__sample: sample,
    src__transformers__backpressure__pairwise: pairwise,
    src__transformers__backpressure__debounce: debounce,
    src__transformers__backpressure__backpressure: backpressure,
    src__transformers__backpressure__buffer: buffer,
    transformers: transformers,
    src__subjects__replay_subject: replay_subject,
    src__transformers__start_with_error: start_with_error,
    src__utils__forwarding_stream: forwarding_stream,
    src__transformers__start_with: start_with,
    src__subjects__behavior_subject: behavior_subject,
    subjects: subjects,
    src__streams__connectable_stream: connectable_stream,
    streams: streams,
    src__rx: rx,
    rxdart: rxdart
  };
}));

//# sourceMappingURL=with_latest_from.dart.lib.js.map
